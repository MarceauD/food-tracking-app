Project Path: food-tracking-app

Source Tree:

```txt
food-tracking-app
├── README.md
├── analysis_options.yaml
├── android
│   ├── app
│   │   ├── build.gradle.kts
│   │   └── src
│   │       ├── debug
│   │       │   └── AndroidManifest.xml
│   │       ├── main
│   │       │   ├── AndroidManifest.xml
│   │       │   ├── java
│   │       │   │   └── io
│   │       │   │       └── flutter
│   │       │   │           └── plugins
│   │       │   ├── kotlin
│   │       │   │   └── com
│   │       │   │       └── example
│   │       │   │           └── foodtrackingapp
│   │       │   │               └── MainActivity.kt
│   │       │   └── res
│   │       │       ├── drawable
│   │       │       │   └── launch_background.xml
│   │       │       ├── drawable-v21
│   │       │       │   └── launch_background.xml
│   │       │       ├── mipmap-hdpi
│   │       │       │   └── ic_launcher.png
│   │       │       ├── mipmap-mdpi
│   │       │       │   └── ic_launcher.png
│   │       │       ├── mipmap-xhdpi
│   │       │       │   └── ic_launcher.png
│   │       │       ├── mipmap-xxhdpi
│   │       │       │   └── ic_launcher.png
│   │       │       ├── mipmap-xxxhdpi
│   │       │       │   └── ic_launcher.png
│   │       │       ├── values
│   │       │       │   └── styles.xml
│   │       │       └── values-night
│   │       │           └── styles.xml
│   │       └── profile
│   │           └── AndroidManifest.xml
│   ├── build.gradle.kts
│   ├── gradle
│   │   └── wrapper
│   │       └── gradle-wrapper.properties
│   ├── gradle.properties
│   └── settings.gradle.kts
├── assets
│   └── images
│       ├── launcher_icon.png
│       ├── undraw_breakfast_rgx5.svg
│       ├── undraw_healthy-habit_2ata.svg
│       ├── undraw_love-it_8pc0.svg
│       └── undraw_stats.svg
├── devtools_options.yaml
├── ios
│   ├── Flutter
│   │   ├── AppFrameworkInfo.plist
│   │   ├── Debug.xcconfig
│   │   └── Release.xcconfig
│   ├── Runner
│   │   ├── AppDelegate.swift
│   │   ├── Assets.xcassets
│   │   │   ├── AppIcon.appiconset
│   │   │   │   ├── Contents.json
│   │   │   │   ├── Icon-App-1024x1024@1x.png
│   │   │   │   ├── Icon-App-20x20@1x.png
│   │   │   │   ├── Icon-App-20x20@2x.png
│   │   │   │   ├── Icon-App-20x20@3x.png
│   │   │   │   ├── Icon-App-29x29@1x.png
│   │   │   │   ├── Icon-App-29x29@2x.png
│   │   │   │   ├── Icon-App-29x29@3x.png
│   │   │   │   ├── Icon-App-40x40@1x.png
│   │   │   │   ├── Icon-App-40x40@2x.png
│   │   │   │   ├── Icon-App-40x40@3x.png
│   │   │   │   ├── Icon-App-60x60@2x.png
│   │   │   │   ├── Icon-App-60x60@3x.png
│   │   │   │   ├── Icon-App-76x76@1x.png
│   │   │   │   ├── Icon-App-76x76@2x.png
│   │   │   │   └── Icon-App-83.5x83.5@2x.png
│   │   │   └── LaunchImage.imageset
│   │   │       ├── Contents.json
│   │   │       ├── LaunchImage.png
│   │   │       ├── LaunchImage@2x.png
│   │   │       ├── LaunchImage@3x.png
│   │   │       └── README.md
│   │   ├── Base.lproj
│   │   │   ├── LaunchScreen.storyboard
│   │   │   └── Main.storyboard
│   │   ├── Info.plist
│   │   └── Runner-Bridging-Header.h
│   ├── Runner.xcodeproj
│   │   ├── project.pbxproj
│   │   ├── project.xcworkspace
│   │   │   ├── contents.xcworkspacedata
│   │   │   └── xcshareddata
│   │   │       ├── IDEWorkspaceChecks.plist
│   │   │       └── WorkspaceSettings.xcsettings
│   │   └── xcshareddata
│   │       └── xcschemes
│   │           └── Runner.xcscheme
│   ├── Runner.xcworkspace
│   │   ├── contents.xcworkspacedata
│   │   └── xcshareddata
│   │       ├── IDEWorkspaceChecks.plist
│   │       └── WorkspaceSettings.xcsettings
│   └── RunnerTests
│       └── RunnerTests.swift
├── lib
│   ├── controllers
│   │   ├── add_food_controller.dart
│   │   ├── home_controller.dart
│   │   └── settings_controller.dart
│   ├── helpers
│   │   └── database_helper.dart
│   ├── main.dart
│   ├── models
│   │   ├── daily_summary.dart
│   │   ├── food_item.dart
│   │   ├── portion.dart
│   │   └── saved_meals.dart
│   ├── providers
│   │   └── theme_provider.dart
│   ├── screens
│   │   ├── add_food_screen.dart
│   │   ├── barcode_scanner_screen.dart
│   │   ├── home_screen.dart
│   │   ├── settings_screen.dart
│   │   └── stats_screen.dart
│   └── widgets
│       ├── common
│       │   ├── empty_state_widget.dart
│       │   ├── primary_button.dart
│       │   └── secondary_button.dart
│       └── home
│           ├── meal_journal_card.dart
│           ├── quick_add_card.dart
│           └── summary_card.dart
├── linux
│   ├── CMakeLists.txt
│   ├── flutter
│   │   ├── CMakeLists.txt
│   │   ├── generated_plugin_registrant.cc
│   │   ├── generated_plugin_registrant.h
│   │   └── generated_plugins.cmake
│   └── runner
│       ├── CMakeLists.txt
│       ├── main.cc
│       ├── my_application.cc
│       └── my_application.h
├── macos
│   ├── Flutter
│   │   ├── Flutter-Debug.xcconfig
│   │   ├── Flutter-Release.xcconfig
│   │   └── GeneratedPluginRegistrant.swift
│   ├── Runner
│   │   ├── AppDelegate.swift
│   │   ├── Assets.xcassets
│   │   │   └── AppIcon.appiconset
│   │   │       ├── Contents.json
│   │   │       ├── app_icon_1024.png
│   │   │       ├── app_icon_128.png
│   │   │       ├── app_icon_16.png
│   │   │       ├── app_icon_256.png
│   │   │       ├── app_icon_32.png
│   │   │       ├── app_icon_512.png
│   │   │       └── app_icon_64.png
│   │   ├── Base.lproj
│   │   │   └── MainMenu.xib
│   │   ├── Configs
│   │   │   ├── AppInfo.xcconfig
│   │   │   ├── Debug.xcconfig
│   │   │   ├── Release.xcconfig
│   │   │   └── Warnings.xcconfig
│   │   ├── DebugProfile.entitlements
│   │   ├── Info.plist
│   │   ├── MainFlutterWindow.swift
│   │   └── Release.entitlements
│   ├── Runner.xcodeproj
│   │   ├── project.pbxproj
│   │   ├── project.xcworkspace
│   │   │   └── xcshareddata
│   │   │       └── IDEWorkspaceChecks.plist
│   │   └── xcshareddata
│   │       └── xcschemes
│   │           └── Runner.xcscheme
│   ├── Runner.xcworkspace
│   │   ├── contents.xcworkspacedata
│   │   └── xcshareddata
│   │       └── IDEWorkspaceChecks.plist
│   └── RunnerTests
│       └── RunnerTests.swift
├── pubspec.lock
├── pubspec.yaml
├── test
│   └── widget_test.dart
├── venv
└── web
    ├── favicon.png
    ├── icons
    │   ├── Icon-192.png
    │   ├── Icon-512.png
    │   ├── Icon-maskable-192.png
    │   └── Icon-maskable-512.png
    ├── index.html
    └── manifest.json

```

`food-tracking-app/README.md`:

```md
# Application de suivi d'alimentation

Application pour éviter d'utiliser les alternatives payantes ou avec pub disponibles sur le marché pour suivre son alimentation : comptage des calories, des macronutriments à partir d'aliments sélectionnés.

Développement avec [Flutter](https://flutter.dev/) et [VS Code](https://code.visualstudio.com/) avec [extension](https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter)

Ressources : 

* Construction de l'[environnement](https://docs.flutter.dev/get-started/install/windows/mobile)
* Première application de [test](https://docs.flutter.dev/get-started/codelab)
* Création d'une première maquette avec ChatGPT...
```

`food-tracking-app/analysis_options.yaml`:

```yaml
include: package:flutter_lints/flutter.yaml

linter:
  rules:
    prefer_const_constructors: false
    prefer_final_fields: false
    use_key_in_widget_constructors: false
    prefer_const_literals_to_create_immutables: false
    prefer_const_constructors_in_immutables: false
    avoid_print: false

```

`food-tracking-app/android\app\build.gradle.kts`:

```kts
plugins {
    id("com.android.application")
    id("kotlin-android")
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("dev.flutter.flutter-gradle-plugin")
}

android {
    namespace = "com.example.foodtrackingapp"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.foodtrackingapp"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.getByName("debug")
        }
    }
}

flutter {
    source = "../.."
}

```

`food-tracking-app/android\app\src\debug\AndroidManifest.xml`:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>

```

`food-tracking-app/android\app\src\main\AndroidManifest.xml`:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-permission android:name="android.permission.CAMERA" />
    <application
        android:label="Suivi de l'alimentation"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>

```

`food-tracking-app/android\app\src\main\kotlin\com\example\foodtrackingapp\MainActivity.kt`:

```kt
package com.example.foodtrackingapp

import io.flutter.embedding.android.FlutterActivity

class MainActivity : FlutterActivity()

```

`food-tracking-app/android\app\src\main\res\drawable-v21\launch_background.xml`:

```xml
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="?android:colorBackground" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>

```

`food-tracking-app/android\app\src\main\res\drawable\launch_background.xml`:

```xml
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@android:color/white" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>

```

`food-tracking-app/android\app\src\main\res\values-night\styles.xml`:

```xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>

```

`food-tracking-app/android\app\src\main\res\values\styles.xml`:

```xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>

```

`food-tracking-app/android\app\src\profile\AndroidManifest.xml`:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>

```

`food-tracking-app/android\build.gradle.kts`:

```kts
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

val newBuildDir: Directory = rootProject.layout.buildDirectory.dir("../../build").get()
rootProject.layout.buildDirectory.value(newBuildDir)

subprojects {
    val newSubprojectBuildDir: Directory = newBuildDir.dir(project.name)
    project.layout.buildDirectory.value(newSubprojectBuildDir)
}
subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register<Delete>("clean") {
    delete(rootProject.layout.buildDirectory)
}

```

`food-tracking-app/android\gradle.properties`:

```properties
org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=4G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError
android.useAndroidX=true
android.enableJetifier=true

```

`food-tracking-app/android\gradle\wrapper\gradle-wrapper.properties`:

```properties
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.12-all.zip

```

`food-tracking-app/android\settings.gradle.kts`:

```kts
pluginManagement {
    val flutterSdkPath = run {
        val properties = java.util.Properties()
        file("local.properties").inputStream().use { properties.load(it) }
        val flutterSdkPath = properties.getProperty("flutter.sdk")
        require(flutterSdkPath != null) { "flutter.sdk not set in local.properties" }
        flutterSdkPath
    }

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id("dev.flutter.flutter-plugin-loader") version "1.0.0"
    id("com.android.application") version "8.7.3" apply false
    id("org.jetbrains.kotlin.android") version "2.1.0" apply false
}

include(":app")

```

`food-tracking-app/assets\images\undraw_breakfast_rgx5.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" width="888" height="485.489" viewBox="0 0 888 485.489" xmlns:xlink="http://www.w3.org/1999/xlink" role="img" artist="Katerina Limpitsouni" source="https://undraw.co/"><title>breakfast</title><path d="M275.41211,460.30048H246.99329a3.76777,3.76777,0,0,0-3.76777,3.76776v12.47387a3.76777,3.76777,0,0,0,3.76777,3.76777h4.70941V499h19V480.30988h4.70941a3.76777,3.76777,0,0,0,3.76776-3.76777V464.06824A3.76777,3.76777,0,0,0,275.41211,460.30048Z" transform="translate(-156 -207.2555)" fill="#4CAF50"/><path d="M303.87661,574.46128a146.10549,146.10549,0,0,1-25.418-86.62437,3.08142,3.08142,0,0,0-2.40522-3.075V479.372H246.03933v5.315h-.41356a3.07971,3.07971,0,0,0-3.06724,3.30786q3.54683,49.44186-23.95358,88.677a8.4873,8.4873,0,0,0-1.53606,5.14352l3.28188,101.51817a8.78815,8.78815,0,0,0,8.713,8.48191h67.88732a8.79123,8.79123,0,0,0,8.71824-8.63152l1.26471-98.56588A17.78875,17.78875,0,0,0,303.87661,574.46128Z" transform="translate(-156 -207.2555)" fill="#3f3d56"/><path d="M269.48783,464.36493a8.12881,8.12881,0,0,1-16.25763,0" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M293.12991,608.18244h-8.22064a21.57614,21.57614,0,0,0-42.6488,0h-8.22118a6.06671,6.06671,0,0,0-5.99616,6.98918l8.92944,58.04135h51.27407l10.84608-57.84582A6.0667,6.0667,0,0,0,293.12991,608.18244Z" transform="translate(-156 -207.2555)" fill="#4CAF50"/><polygon points="827.952 307.634 825.98 386.448 823.538 484.181 740.414 484.181 737.552 369.675 736 307.634 827.952 307.634" fill="#e6e6e6"/><rect x="775.72312" y="265.70393" width="11.76981" height="155.95002" fill="#4CAF50"/><path d="M978.06676,574.27527l-2.22611,112.02H900.07391l-2.60826-131.24365a51.63393,51.63393,0,0,1,40.82688,5.61536C950.95161,568.15405,965.173,572.18424,978.06676,574.27527Z" transform="translate(-156 -207.2555)" fill="#3f3d56"/><rect x="752.03074" y="379.63032" width="10.79992" height="10.79992" fill="#e6e6e6"/><rect x="759.38688" y="357.56192" width="10.79992" height="10.79992" fill="#e6e6e6"/><rect x="936.42384" y="575.81564" width="10.79992" height="10.79992" transform="translate(375.57517 -653.92108) rotate(36.56259)" fill="#e6e6e6"/><rect x="955.93676" y="594.95132" width="10.79992" height="10.79992" transform="translate(390.81432 -661.77916) rotate(36.56259)" fill="#e6e6e6"/><rect x="922.83416" y="605.98552" width="10.79992" height="10.79992" transform="translate(390.87303 -639.88846) rotate(36.56259)" fill="#e6e6e6"/><circle cx="805.14765" cy="351.03508" r="2.20684" fill="#3f3d56"/><circle cx="760.27524" cy="336.32281" r="2.20684" fill="#3f3d56"/><circle cx="797.79152" cy="320.87493" r="2.20684" fill="#3f3d56"/><circle cx="444.50808" cy="241.75402" r="241.75402" fill="#4CAF50"/><path d="M600.50808,625.46663a176.45595,176.45595,0,1,1,124.77436-51.68275A175.30352,175.30352,0,0,1,600.50808,625.46663Zm0-342.0314c-91.29808,0-165.5743,74.27621-165.5743,165.57429,0,91.2977,74.27622,165.5743,165.5743,165.5743,91.2977,0,165.57429-74.2766,165.57429-165.5743C766.08237,357.71144,691.80578,283.43523,600.50808,283.43523Z" transform="translate(-156 -207.2555)" opacity="0.2"/><circle cx="444.50808" cy="241.75402" r="171.0157" fill="#3f3d56"/><path d="M473.32742,380.62742a21.704,21.704,0,1,1,38.68118-19.69819l48.31632,94.87836a21.704,21.704,0,1,1-38.68118,19.69819Z" transform="translate(-156 -207.2555)" fill="#ff6584"/><path d="M478.71655,391.21l-2.23-4.379c11.12916-8.64736,24.19788-15.007,38.68118-19.69819l2.23,4.379C501.72232,374.77607,488.38616,380.817,478.71655,391.21Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M489.12314,411.64534l-2.23-4.379c11.12915-8.64736,24.19788-15.007,38.68117-19.69819l2.23,4.379C512.12891,395.21141,498.79275,401.25236,489.12314,411.64534Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M499.52973,432.08068l-2.23-4.379c11.12915-8.64736,24.19788-15.007,38.68118-19.69819l2.23,4.379C522.5355,415.64675,509.19935,421.6877,499.52973,432.08068Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M509.93632,452.516l-2.23-4.379c11.12916-8.64736,24.19788-15.007,38.68118-19.69819l2.23,4.379C532.94209,436.08209,519.60594,442.123,509.93632,452.516Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M520.34292,472.95136l-2.23-4.379c11.12916-8.64736,24.19788-15.007,38.68118-19.69819l2.23,4.379C543.34868,456.51743,530.01253,462.55838,520.34292,472.95136Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M437.07906,416.14643a21.704,21.704,0,1,1,38.68118-19.6982l48.31632,94.87837a21.704,21.704,0,0,1-38.68118,19.69819Z" transform="translate(-156 -207.2555)" fill="#ff6584"/><path d="M442.46819,426.729l-2.23-4.379c11.12916-8.64736,24.19788-15.007,38.68118-19.69819l2.23,4.379C465.474,410.29508,452.1378,416.336,442.46819,426.729Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M452.87478,447.16435l-2.23-4.379c11.12915-8.64736,24.19788-15.007,38.68118-19.69819l2.23,4.379C475.88055,430.73042,462.5444,436.77137,452.87478,447.16435Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M463.28137,467.59969l-2.23-4.379c11.12915-8.64736,24.19788-15.007,38.68118-19.69819l2.23,4.379C486.28714,451.16576,472.951,457.20671,463.28137,467.59969Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M473.688,488.035l-2.23-4.379c11.12916-8.64736,24.19788-15.007,38.68118-19.69819l2.23,4.379C496.69373,471.6011,483.35758,477.64205,473.688,488.035Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M484.09456,508.47037l-2.23-4.379c11.12916-8.64736,24.19788-15.007,38.68118-19.69819l2.23,4.379C507.10032,492.03644,493.76417,498.07739,484.09456,508.47037Z" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M714.77766,454.45093l.15257.00013a25.8881,25.8881,0,0,0,24.23924-16.23619,84.50284,84.50284,0,0,0,5.9231-31.69393c-.27144-45.91073-37.62223-83.57515-83.52936-84.21021a84.74394,84.74394,0,0,0-35.27687,162.32018,25.66668,25.66668,0,0,0,28.50566-5.28585A84.45815,84.45815,0,0,1,714.77766,454.45093Z" transform="translate(-156 -207.2555)" fill="#e6e6e6"/><circle cx="515.24639" cy="193.55868" r="27.98439" fill="#f9a825"/><circle cx="454.42624" cy="187.11516" r="3.29669" fill="#3f3d56"/><circle cx="345.59806" cy="190.22453" r="3.29669" fill="#3f3d56"/><circle cx="471.99609" cy="152.94948" r="3.29669" fill="#3f3d56"/><circle cx="471.90243" cy="247.97277" r="3.29669" fill="#3f3d56"/><circle cx="537.19934" cy="146.14069" r="3.29669" fill="#3f3d56"/><circle cx="324.20705" cy="236.31261" r="3.29669" fill="#3f3d56"/><circle cx="348.30472" cy="283.7306" r="3.29669" fill="#3f3d56"/><circle cx="499.69951" cy="289.94935" r="12.43751" fill="#ff6584"/><path d="M665.02764,497.9822a9.32813,9.32813,0,0,1-18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M646.37138,496.42751a9.32813,9.32813,0,0,1,18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><ellipse cx="495.03545" cy="285.67396" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="499.69951" cy="284.11927" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="499.69951" cy="294.22475" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="504.36357" cy="288.00599" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="503.58623" cy="296.55678" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="494.2581" cy="292.67006" rx="0.77734" ry="1.16602" fill="#ff6584"/><circle cx="524.57452" cy="256.52356" r="12.43751" fill="#ff6584"/><path d="M689.90265,464.5564a9.32813,9.32813,0,0,1-18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M671.24639,463.00172a9.32813,9.32813,0,0,1,18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><ellipse cx="519.91046" cy="252.24816" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="524.57452" cy="250.69348" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="524.57452" cy="260.79895" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="529.23859" cy="254.5802" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="528.46124" cy="263.13098" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="519.13311" cy="259.24426" rx="0.77734" ry="1.16602" fill="#ff6584"/><circle cx="549.44953" cy="273.62513" r="12.43751" fill="#4CAF50"/><path d="M714.77766,481.658a9.32813,9.32813,0,0,1-18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M696.1214,480.10329a9.32813,9.32813,0,0,1,18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><ellipse cx="544.78547" cy="269.34974" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="549.44953" cy="267.79505" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="549.44953" cy="277.90052" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="554.1136" cy="271.68177" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="553.33625" cy="280.23255" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="544.00812" cy="276.34583" rx="0.77734" ry="1.16602" fill="#4CAF50"/><circle cx="487.262" cy="275.17982" r="12.43751" fill="#4CAF50"/><path d="M652.59013,483.21266a9.32813,9.32813,0,0,1-18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M633.93387,481.658a9.32813,9.32813,0,0,1,18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><ellipse cx="482.59794" cy="270.90442" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="487.262" cy="269.34974" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="487.262" cy="279.45521" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="491.92607" cy="273.23646" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="491.14872" cy="281.78724" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="481.8206" cy="277.90052" rx="0.77734" ry="1.16602" fill="#4CAF50"/><circle cx="515.24639" cy="280.62122" r="12.43751" fill="#4CAF50"/><path d="M680.57452,488.65407a9.32813,9.32813,0,1,1-18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M661.91826,487.09938a9.32813,9.32813,0,1,1,18.65626,0" transform="translate(-156 -207.2555)" opacity="0.2"/><ellipse cx="510.58233" cy="276.34583" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="515.24639" cy="274.79114" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="515.24639" cy="284.89662" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="519.91046" cy="278.67786" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="519.13311" cy="287.22865" rx="0.77734" ry="1.16602" fill="#4CAF50"/><ellipse cx="509.80498" cy="283.34193" rx="0.77734" ry="1.16602" fill="#4CAF50"/><circle cx="534.68" cy="293.83607" r="12.43751" fill="#ff6584"/><path d="M700.00812,501.86892a9.32812,9.32812,0,1,1-18.65625,0" transform="translate(-156 -207.2555)" opacity="0.2"/><path d="M681.35187,500.31423a9.32812,9.32812,0,1,1,18.65625,0" transform="translate(-156 -207.2555)" opacity="0.2"/><ellipse cx="530.01593" cy="289.56068" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="534.68" cy="288.00599" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="534.68" cy="298.11147" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="539.34406" cy="291.89271" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="538.56672" cy="300.4435" rx="0.77734" ry="1.16602" fill="#ff6584"/><ellipse cx="529.23859" cy="296.55678" rx="0.77734" ry="1.16602" fill="#ff6584"/><circle cx="374.73442" cy="246.41808" r="3.29669" fill="#3f3d56"/><polygon points="464.345 366.08 385.17 344.123 388.203 332.857 467.378 354.815 464.345 366.08" fill="#f9a825"/><path d="M608.73806,569.57043a218.26828,218.26828,0,0,1-82.07767,0V557.89212a250.99129,250.99129,0,0,0,82.07767,0Z" transform="translate(-156 -207.2555)" fill="#f9a825"/><path d="M617.17595,534.53552a218.26828,218.26828,0,0,1-82.07767,0V522.85721a250.99184,250.99184,0,0,0,82.07767,0Z" transform="translate(-156 -207.2555)" fill="#f9a825"/><path d="M645.558,548.54948a218.26833,218.26833,0,0,1-82.07768,0v-11.6783a250.9919,250.9919,0,0,0,82.07768,0Z" transform="translate(-156 -207.2555)" fill="#f9a825"/><path d="M652.46168,561.78489a218.26787,218.26787,0,0,1-82.07767,0v-11.6783a250.99184,250.99184,0,0,0,82.07767,0Z" transform="translate(-156 -207.2555)" fill="#f9a825"/><polygon points="520.531 371.824 439.554 385.426 437.676 373.904 518.652 360.302 520.531 371.824" fill="#f9a825"/><path d="M664.43494,580.57677a219.97,219.97,0,0,1-74.58008,34.78439l-4.80446-10.61152a252.95437,252.95437,0,0,0,74.58007-34.78439Z" transform="translate(-156 -207.2555)" fill="#f9a825"/><path d="M657.68866,545.16625a219.96991,219.96991,0,0,1-74.58007,34.78439l-4.80446-10.61152a252.95437,252.95437,0,0,0,74.58007-34.78439Z" transform="translate(-156 -207.2555)" fill="#f9a825"/><path d="M689.24339,545.87182a219.96977,219.96977,0,0,1-74.58008,34.78439l-4.80446-10.61151a252.95471,252.95471,0,0,0,74.58008-34.7844Z" transform="translate(-156 -207.2555)" fill="#f9a825"/><path d="M700.96153,554.97242a219.96991,219.96991,0,0,1-74.58007,34.78439L621.577,579.14529a252.95437,252.95437,0,0,0,74.58007-34.78439Z" transform="translate(-156 -207.2555)" fill="#f9a825"/><rect x="442.95339" y="324.92984" width="3.88672" height="3.88672" fill="#00bf71"/><rect x="454.61355" y="392.55878" width="3.88672" height="3.88672" fill="#00bf71"/><rect x="392.42602" y="324.92984" width="3.88672" height="3.88672" fill="#00bf71"/><rect x="482.59794" y="373.12517" width="3.88672" height="3.88672" fill="#00bf71"/><rect x="484.92997" y="350.5822" width="3.88672" height="3.88672" fill="#00bf71"/><rect x="574.85572" y="545.40019" width="5.44141" height="3.10938" transform="translate(250.70796 -437.19066) rotate(34.15572)" fill="#00bf71"/><rect x="620.71902" y="553.95098" width="5.44141" height="3.10938" transform="translate(263.41949 -461.46545) rotate(34.15572)" fill="#00bf71"/><rect x="564.75025" y="568.72051" width="5.44141" height="3.10938" transform="translate(262.05797 -427.49459) rotate(34.15572)" fill="#00bf71"/><rect x="596.62136" y="565.61114" width="5.44141" height="3.10938" transform="translate(1249.17714 182.37779) rotate(124.15572)" fill="#00bf71"/><rect x="617.60965" y="571.05255" width="5.44141" height="3.10938" transform="translate(1286.45203 173.50612) rotate(124.15572)" fill="#00bf71"/><rect x="673.57842" y="552.39629" width="5.44141" height="3.10938" transform="matrix(-0.56144, 0.82751, -0.82751, -0.56144, 1358.40581, 98.06043)" fill="#00bf71"/><rect y="483.24828" width="888" height="2.24072" fill="#3f3d56"/></svg>
```

`food-tracking-app/assets\images\undraw_healthy-habit_2ata.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" width="731.67" height="668.54" viewBox="0 0 731.67 668.54" xmlns:xlink="http://www.w3.org/1999/xlink" role="img" artist="Katerina Limpitsouni" source="https://undraw.co/"><g><path d="m421.36,228.72s-.3,13-24.05,31.99l-5.38,9.65,50.19,28.97c4.52.21,9.6,1.4,14.66,3.65,13.12,5.83,21.13,16.48,17.88,23.8s-16.52,8.53-29.65,2.7c-2.87-1.27-5.5-2.78-7.81-4.43-17.2-4.31-93.73-24.92-85.26-48.38,9.53-26.4,18.86-57.27,18.86-57.27l50.57,9.32h-.01Z" fill="#ffb6b6"/><path d="m379.71,181.09c3.01-9.92,10.25-17.85,19.86-21.76,9.61-3.9,20.32-3.26,29.41,1.74,8.81,4.86,15.01,13.3,17.01,23.15,2,9.86-.42,20.04-6.63,27.95l-20.94,26.64-52.83-11.22,14.12-46.5h0Z" fill="#4CAF50"/><path d="m488.72,279.68c-15.25-5.45-31.23-8.13-47.89-8.29-1.74-.3-3.4.87-3.7,2.61l-1.81,10.44c-.3,1.74.87,3.4,2.61,3.7,6.5,3.86,13.11,6.2,19.81,7.51l-6.94,40.1c-7.8-1.52-14.96-1.88-21.05-.31-1.74-.3-3.4.87-3.7,2.61l-1.81,10.44c-.3,1.74.87,3.4,2.61,3.7,13.58,4.89,30.11,7.16,47.88,8.29,1.74.3,3.4-.87,3.7-2.61l1.81-10.44c.3-1.74-.87-3.4-2.61-3.7-6.86-2.49-13.59-4.75-20-6.42l7.04-40.64c6.99.68,14.05.43,21.15-.24,1.74.3,3.4-.87,3.7-2.61l1.81-10.44c.3-1.74-.87-3.4-2.61-3.7h0Z" fill="#2f2e41"/></g><path d="m275.53,624.75l-46.8-47.86,33.82-48.32,9.17.6c4.87.32,9.08-3.36,9.42-8.23l1.72-24.72c.36-5.12-3.7-9.48-8.84-9.48h-85.96c.7-1.67.88-3.54.47-5.35l-51.28-226.96c-.99-4.38-5.1-7.33-9.57-6.86l-20.26,2.13c-5.27.56-8.88,5.59-7.72,10.76l54.94,244.1c1.24,5.5,6.92,8.07,11.63,6.4-.26.73-.41,1.46-.47,2.2l-7.29.58-124,138h38l96-107,92,107h30l1-18-16-9h.02Zm-89.95-101.22l50.33,3.3-19.71,37.24-28.66-29.31-1.95-11.23h-.01Z" fill="#f2f2f2"/><path d="m0,652.04c0,.66.53,1.19,1.19,1.19h729.29c.66,0,1.19-.53,1.19-1.19s-.53-1.19-1.19-1.19H1.19c-.66,0-1.19.53-1.19,1.19Z" fill="#3f3d56"/><circle cx="435.75" cy="63.04" r="41" fill="#ffb6b6"/><polygon points="357.53 585.75 357.53 626.75 326.53 627.75 327.82 585.75 357.53 585.75" fill="#ffb6b6"/><path d="m348.44,621.52l-.11.17-.2.04c-.75.17-18.38,3.99-23.52-3.2-.41-.57-.76-.8-1.06-.71-3.36,1.08-6.03,26.7-6.03,36.42,0,5.73,12.78,7.21,28.97,9.07,7.56.87,16.13,1.86,24.62,3.43,18.46,3.42,33.67-5.04,41.1-10.39,1.31-.95,2.12-2.42,2.21-4.03.09-1.62-.55-3.18-1.76-4.27-9.79-8.82-42.18-37.74-47.77-39.33-.4-.11-.81-.17-1.23-.17-6.49,0-15.13,12.83-15.22,12.96h0Z" fill="#2f2e41"/><polygon points="415.53 585.75 415.53 626.75 384.53 627.75 385.82 585.75 415.53 585.75" fill="#ffb6b6"/><polygon points="428.03 292.25 444.53 304.75 447.53 445.75 419.53 599.75 383.03 601.25 382.03 454.25 335.03 320.25 344.53 288.75 428.03 292.25" fill="#2f2e41"/><polygon points="351.03 316.25 335.03 320.25 323.53 599.75 365.03 596.25 392.53 398.75 351.03 316.25" fill="#2f2e41"/><path d="m428.94,667.74c-8.46-1.57-17.01-2.55-24.55-3.42-17.33-2-29.85-3.45-29.85-10.07,0-5.02,1.94-35.84,6.72-37.37.53-.17,1.33-.11,2.18,1.08,4.48,6.27,20.35,3.24,22.29,2.84,1.2-1.76,10.5-15.02,17.44-13.03,5.35,1.53,31.85,24.88,47.18,38.66,1.7,1.53,2.59,3.72,2.44,6-.15,2.26-1.3,4.3-3.17,5.58-6.17,4.24-17.73,10.53-31.96,10.53-2.81,0-5.73-.25-8.72-.8h0Z" fill="#2f2e41"/><polygon points="390.9 114.14 399.86 84.05 438.85 93.93 437.27 126.59 390.9 114.14" fill="#ffb6b6"/><path d="m344.44,289.24l-.44-.08,6.87-108.38c1.42-22.39,9.53-43.52,23.45-61.1l17.08-21.57,54.37,30.21.21.11,12.04,64.23.02.12-13.03,112.12-.13.43-100.44-16.08h0Z" fill="#4CAF50"/><path d="m400.21,84.98l3.51.81s6.05-23.65,10.03-18.74c3.99,4.91,14.17,6.41,14.17,6.41l3.5-7.73s18.96-.74,22.1-9.4c0,0,40.27,1.92,28.99-19.48-11.27-21.4-14.89-16.83-14.89-16.83,0,0-11.01-6.54-13.48-13.09s-26.76-12.26-41.08,1.59c-52.46,50.77-12.86,76.45-12.86,76.45h0Z" fill="#3f3d56"/><g><g><rect x="492.38" y="238.12" width="7" height="44" transform="translate(-38.58 93.04) rotate(-10.32)" fill="#3f3d56"/><path d="m476.35,288.58c10.76-7.4,28.62-8.63,47.81-8.7,1.74-.32,3.41.84,3.72,2.58l1.9,10.43c.32,1.74-.84,3.41-2.58,3.72-17.08,5.06-33.37,8.62-47.81,8.7-1.74.32-3.41-.84-3.72-2.58l-1.9-10.43c-.32-1.74.84-3.41,2.58-3.72h0Z" fill="#3f3d56"/><path d="m464.71,224.64c15.69-5.58,31.62-8.57,47.81-8.7,1.74-.32,3.41.84,3.72,2.58l1.9,10.43c.32,1.74-.84,3.41-2.58,3.72-14.78,7.07-30.15,12-47.81,8.7-1.74.32-3.41-.84-3.72-2.58l-1.9-10.43c-.32-1.74.84-3.41,2.58-3.72h0Z" fill="#3f3d56"/></g><path d="m431.73,191.28s4.19,12.3-11.56,38.32l-1.73,10.91,57.09,9.91c4.32-1.36,9.5-1.99,15.02-1.62,14.33.95,25.51,8.2,24.98,16.19s-12.58,13.7-26.9,12.75c-3.13-.21-6.12-.72-8.86-1.47-17.64,1.88-96.58,8.88-96.71-16.06-.14-28.07-2.01-60.27-2.01-60.27l50.68-8.66h0Z" fill="#ffb6b6"/><path d="m376.23,160.91c-.59-10.35,3.48-20.29,11.15-27.26,7.67-6.97,17.95-10.06,28.21-8.49,9.94,1.53,18.67,7.32,23.94,15.88s6.51,18.96,3.4,28.53l-10.48,32.22-53.46,7.65-2.75-48.52h0Z" fill="#4CAF50"/></g><g><rect x="138.37" y="606.07" width="44" height="7" transform="translate(-455.33 744.49) rotate(-87.62)" fill="#3f3d56"/><path d="m135.07,633c12.12-4.86,29.81-2.13,48.56,2.01,1.76.07,3.14,1.57,3.07,3.33l-.44,10.59c-.07,1.76-1.57,3.14-3.33,3.07-17.78,1.18-34.45,1.08-48.56-2.01-1.76-.07-3.14-1.57-3.07-3.33l.44-10.59c.07-1.76,1.57-3.14,3.33-3.07Z" fill="#3f3d56"/><path d="m137.77,568.06c16.53-2,32.73-1.41,48.56,2.01,1.76.07,3.14,1.57,3.07,3.33l-.44,10.59c-.07,1.76-1.57,3.14-3.33,3.07-15.97,3.65-32.05,5.08-48.56-2.01-1.76-.07-3.14-1.57-3.07-3.33l.44-10.59c.07-1.76,1.57-3.14,3.33-3.07Z" fill="#3f3d56"/></g></svg>
```

`food-tracking-app/assets\images\undraw_love-it_8pc0.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" width="304.39863" height="525.41845" viewBox="0 0 304.39863 525.41845" xmlns:xlink="http://www.w3.org/1999/xlink" role="img" artist="Katerina Limpitsouni" source="https://undraw.co/"><path d="m43.17864,524.22844c0,.65997.53,1.19,1.19,1.19h258.83999c.66,0,1.19-.53003,1.19-1.19s-.53-1.19-1.19-1.19H44.36864c-.66,0-1.19.53003-1.19,1.19Z" fill="#484565" stroke-width="0"/><path d="m179.29864.32846s-21.91-5.31-35.17,26.77c-11.05,26.74-18.89,41.02-9.92,50.72,3.21001,3.47,7.78999,5.34,12.50999,5.5l50.5,1.66s18.54001-48.62,7.27-66.2C193.21864,1.18846,179.29864.32846,179.29864.32846Z" fill="#2f2e41" stroke-width="0"/><polygon points="189.75865 80.93847 165.46864 88.92846 165.46864 53.95846 187.50865 53.95846 189.75865 80.93847" fill="#f6a6a9" stroke-width="0"/><polygon points="171.11863 504.68847 148.35864 504.68847 135.16864 383.10845 170.33864 383.10845 171.11863 504.68847" fill="#f6a6a9" stroke-width="0"/><path d="m126.19864,524.22844c-2.39,0-4.52-.06-6.13-.21002-6.05-.54999-11.81-5.01001-14.71-7.62-1.3-1.16998-1.72-3.03998-1.04-4.64999h0c.49-1.16,1.46-2.01999,2.66-2.35999l15.97-4.56,25.86-17.45001.28999.51999c.11.19,2.64999,4.76999,3.5,7.85999.32001,1.17999.24001,2.16-.25,2.91-.34.53-.81.82999-1.2,1,.47.48999,1.94,1.48001,6.45,2.20001,6.60001,1.04999,7.98-5.79001,8.03999-6.07999l.03999-.23001.2-.13c3.14-2.01999,5.07001-2.94,5.74001-2.75.42.12,1.11.32999,2.98,18.95001.19.57999,1.5,4.87003.61,8.95999-.97,4.46002-20.44,2.91998-24.34,2.57001-.11.01001-14.69,1.04999-24.68,1.04999v.02002h.01001Z" fill="#2f2e41" stroke-width="0"/><polygon points="222.51864 504.68847 199.76864 504.68847 186.56865 383.10845 221.73865 383.10845 222.51864 504.68847" fill="#f6a6a9" stroke-width="0"/><path d="m177.60864,524.22844c-2.39,0-4.52-.06-6.13-.21002-6.05-.54999-11.81-5.01001-14.71001-7.62-1.3-1.16998-1.72-3.03998-1.03999-4.64999h0c.49001-1.16,1.46001-2.01999,2.66-2.35999l15.97-4.56,25.86-17.45001.28999.51999c.11.19,2.64999,4.76999,3.5,7.85999.32001,1.17999.24001,2.16-.25,2.91-.34.53-.81.82999-1.2,1,.47.48999,1.94,1.48001,6.45,2.20001,6.60001,1.04999,7.98-5.79001,8.03999-6.07999l.03999-.23001.2-.13c3.14-2.01999,5.07001-2.94,5.74001-2.75.42.12,1.11.32999,2.98,18.95001.19.57999,1.5,4.87003.61,8.95999-.97,4.46002-20.44,2.91998-24.34,2.57001-.11.01001-14.69,1.04999-24.68001,1.04999v.02002h.01003Z" fill="#2f2e41" stroke-width="0"/><polygon points="229.06865 206.06847 118.50864 206.06847 158.24864 75.27846 202.32864 75.27846 229.06865 206.06847" fill="#dddedf" stroke-width="0"/><path id="uuid-4a4bca5f-bbd8-4dc2-85ff-0c3c360aac48-263" d="m115.49864,279.45846c-1.32,8.01001-6.66,13.76001-11.93,12.82999-5.27-.92999-8.48-8.17001-7.16-16.17999.48-3.20999,1.75-6.23999,3.7-8.85001l6.02-33.87,16.39,3.42999-7.68,33.01999c1.01,3.12,1.24,6.42001.67,9.62h0l-.00999.00003Z" fill="#f6a6a9" stroke-width="0"/><path d="m165.20865,75.29847s-27.46001-.72-30.35001,6.5c-2.89,7.23-36.85,179.21001-36.85,179.21001h22.4l44.8-185.71001Z" fill="#dddedf" stroke-width="0"/><circle cx="171.03865" cy="38.00846" r="24.21" fill="#f6a6a9" stroke-width="0"/><path d="m174.83864,8.31846s-31.08,46.23-25.85001,75.07l-18.08-11.33s12.73-58.38,31.7-62.91l12.23-.84h0v.01h.00002Z" fill="#2f2e41" stroke-width="0"/><path d="m206.08864,206.06847h-72.55l-39.7,162.92999c-.73,6.88,3.63,13.29999,10.32,15.09,21.78,5.82999,74.04,14.10001,153.15-8.92001,7.60999-2.20999,11.92999-10.23999,9.54001-17.79999l-60.75999-151.28999h0v-.00999h-.00002Z" fill="#2f2e41" stroke-width="0"/><path d="m174.03865,87.51846l20.10001-10.31c9.19-3.4,19.44-2.26,27.66,3.09,25,16.26,74.28,52.11001,53.10001,69.83001-27.91,23.36-65.64-18.07001-65.64-18.07001l-35.22-44.54h-.00002Z" fill="#dddedf" stroke-width="0"/><path d="m105.21208,112.47261l-.09075.09075c-.82451-.93341-1.67171-1.85321-2.56428-2.74578-23.46165-23.46165-61.50005-23.461-84.96105,0-23.461,23.461-23.46165,61.4994,0,84.96105.89257.89257,1.81237,1.73977,2.74578,2.56428l-.09075.09075,84.96105,84.96105,84.96105-84.96105c23.461-23.461,23.461-61.50005,0-84.96105-23.46165-23.46165-61.50005-23.461-84.96105,0Z" fill="#4CAF50" stroke-width="0"/><path id="uuid-716df4fd-1583-411d-917d-5110e649fc7d-264" d="m173.59865,105.13846c-6.99001-4.12-10.42-11.18-7.64999-15.77,2.77-4.58,10.67999-4.95,17.67999-.83,2.82001,1.61,5.19,3.89,6.91,6.65l29.39999,17.86-9.12,14.04-28.02-19.1c-3.28-.19-6.44-1.17-9.21001-2.86h.00999l.00002.01Z" fill="#f6a6a9" stroke-width="0"/><polygon points="193.57864 121.32847 201.93864 101.35846 242.78865 114.87846 224.51864 145.28846 193.57864 121.32847" fill="#dddedf" stroke-width="0"/></svg>
```

`food-tracking-app/assets\images\undraw_stats.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" width="1029.56255" height="548.69495" viewBox="0 0 1029.56255 548.69495" xmlns:xlink="http://www.w3.org/1999/xlink" role="img" artist="Katerina Limpitsouni" source="https://undraw.co/"><path d="M133.37467,722.76736l.21351-1.12612c.04736-.24754,4.90753-24.90966,23.12635-39.22042,18.21964-14.3114,43.33085-13.19135,43.58186-13.17828l1.145.05909-.21358,1.12564c-.04737.24754-4.90763,24.90918-23.12636,39.22042-18.21964,14.3114-43.33084,13.19135-43.58186,13.17828ZM157.95,683.994c-15.40414,12.09937-20.95072,31.88327-22.13763,36.85812,5.11571.02181,25.6644-.68921,41.0536-12.77757,15.38743-12.08706,20.94624-31.88051,22.13762-36.85812C193.88493,671.19461,173.33832,671.90627,157.95,683.994Z" transform="translate(-85.21873 -175.65252)" fill="#f1f1f1"/><path d="M165.19537,689.48163c-8.34609,21.49794-30.31721,33.0224-30.31721,33.0224s-8.43942-23.33063-.09333-44.82857S165.102,644.65305,165.102,644.65305,173.54146,667.98369,165.19537,689.48163Z" transform="translate(-85.21873 -175.65252)" fill="#f1f1f1"/><path d="M1084.55991,722.826c-.251.01307-25.36223,1.13312-43.58186-13.17828-18.21874-14.31124-23.079-38.97288-23.12636-39.22042l-.21359-1.12564,1.145-.05909c.251-.01307,25.36223-1.13312,43.58186,13.17828,18.21882,14.31076,23.079,38.97288,23.12636,39.22042l.2135,1.12612Zm-64.484-51.60955c1.19139,4.97761,6.75019,24.77106,22.13763,36.85812,15.38919,12.08836,35.93789,12.79938,41.05359,12.77757-1.1869-4.97485-6.73348-24.75875-22.13762-36.85812C1045.74117,671.90627,1025.19457,671.19461,1020.076,671.21642Z" transform="translate(-85.21873 -175.65252)" fill="#f1f1f1"/><path d="M1053.88412,689.48163c8.34609,21.49794,30.31722,33.0224,30.31722,33.0224s8.43942-23.33063.09333-44.82857-30.31722-33.02241-30.31722-33.02241S1045.538,667.98369,1053.88412,689.48163Z" transform="translate(-85.21873 -175.65252)" fill="#f1f1f1"/><path d="M675.31479,717.62706l-14.5923-6.1443-10.01026-73.15138H517.40762L506.55725,711.1839l-13.05512,6.52746a3.10016,3.10016,0,0,0,1.38657,5.873H674.11213A3.1,3.1,0,0,0,675.31479,717.62706Z" transform="translate(-85.21873 -175.65252)" fill="#e6e6e6"/><path d="M912.20621,648.06385H257.377a12.97344,12.97344,0,0,1-12.9443-12.97332V542.751h680.7178v92.33952A12.97356,12.97356,0,0,1,912.20621,648.06385Z" transform="translate(-85.21873 -175.65252)" fill="#ccc"/><path d="M925.835,586.39288h-682V191.29161a15.6572,15.6572,0,0,1,15.63964-15.63909H910.1952A15.65735,15.65735,0,0,1,925.835,191.29161Z" transform="translate(-85.21873 -175.65252)" fill="#3f3d56"/><path d="M885.10186,557.71639H284.56818a12.07023,12.07023,0,0,1-12.057-12.05667v-329.274a12.07087,12.07087,0,0,1,12.057-12.05741H885.10186a12.07088,12.07088,0,0,1,12.057,12.05741v329.274A12.07024,12.07024,0,0,1,885.10186,557.71639Z" transform="translate(-85.21873 -175.65252)" fill="#fff"/><path d="M1113.255,724.34746l-1026.44821,0a1.56682,1.56682,0,0,1-1.53909-1.13363,1.52912,1.52912,0,0,1,1.47725-1.91893l1026.385,0a1.61535,1.61535,0,0,1,1.61617,1.19368A1.52819,1.52819,0,0,1,1113.255,724.34746Z" transform="translate(-85.21873 -175.65252)" fill="#ccc"/><rect x="219.58182" y="153.2027" width="98.80647" height="9.27916" fill="#e5e5e5"/><rect x="219.58182" y="175.70578" width="98.80647" height="9.27916" fill="#e5e5e5"/><rect x="219.58182" y="198.70578" width="98.80647" height="9.27916" fill="#e5e5e5"/><rect x="219.58182" y="221.70578" width="98.80647" height="9.27916" fill="#e5e5e5"/><rect x="242.98506" y="250.93227" width="52" height="8.05267" fill="#43a047"/><rect x="471.19198" y="210.75367" width="0.94479" height="2.83436" fill="#e5e5e5"/><path d="M557.35549,449.63117h-.94478V443.592h.94478Zm0-12.07807h-.94478v-6.03916h.94478Zm0-12.07831h-.94478v-6.03893h.94478Zm0-12.07808h-.94478v-6.03916h.94478Zm0-12.07808h-.94478v-6.03916h.94478Z" transform="translate(-85.21873 -175.65252)" fill="#e5e5e5"/><rect x="471.19198" y="280.01781" width="0.94479" height="2.83436" fill="#e5e5e5"/><rect x="574.64601" y="210.75367" width="0.94479" height="2.83436" fill="#e5e5e5"/><path d="M660.80952,449.63117h-.94479V443.592h.94479Zm0-12.07807h-.94479v-6.03916h.94479Zm0-12.07831h-.94479v-6.03893h.94479Zm0-12.07808h-.94479v-6.03916h.94479Zm0-12.07808h-.94479v-6.03916h.94479Z" transform="translate(-85.21873 -175.65252)" fill="#e5e5e5"/><rect x="574.64601" y="280.01781" width="0.94479" height="2.83436" fill="#e5e5e5"/><rect x="626.83111" y="155.3061" width="0.94479" height="2.83436" fill="#e5e5e5"/><path d="M712.99462,449.86668h-.94478V444.063h.94478Zm0-11.6073h-.94478V432.4555h.94478Zm0-11.60753h-.94478V420.8482h.94478Zm0-11.6073h-.94478V409.2409h.94478Zm0-11.6073h-.94478v-5.80388h.94478Zm0-11.60753h-.94478v-5.80365h.94478Zm0-11.60731h-.94478v-5.80365h.94478Zm0-11.6073h-.94478v-5.80365h.94478Zm0-11.60753h-.94478v-5.80365h.94478Zm0-11.6073h-.94478v-5.80365h.94478Z" transform="translate(-85.21873 -175.65252)" fill="#e5e5e5"/><rect x="626.83111" y="280.01781" width="0.94479" height="2.83436" fill="#e5e5e5"/><rect x="678.49585" y="132.63125" width="0.94479" height="2.83436" fill="#e5e5e5"/><path d="M764.65936,449.88836h-.94479v-5.7822h.94479Zm0-11.56417h-.94479V432.542h.94479Zm0-11.56416h-.94479v-5.7822h.94479Zm0-11.56417h-.94479v-5.7822h.94479Zm0-11.56417h-.94479v-5.7822h.94479Zm0-11.56416h-.94479v-5.7822h.94479Zm0-11.56417h-.94479v-5.7822h.94479Zm0-11.56417h-.94479V363.157h.94479Zm0-11.56416h-.94479v-5.7822h.94479Zm0-11.56417h-.94479v-5.7822h.94479Zm0-11.56417h-.94479v-5.7822h.94479Zm0-11.56417h-.94479v-5.78219h.94479Z" transform="translate(-85.21873 -175.65252)" fill="#e5e5e5"/><rect x="678.49585" y="280.01781" width="0.94479" height="2.83436" fill="#e5e5e5"/><rect x="523.15519" y="172.78464" width="0.94479" height="2.83436" fill="#e5e5e5"/><path d="M609.3187,450.17576h-.94478V444.6812h.94478Zm0-10.98936h-.94478v-5.49456h.94478Zm0-10.98936h-.94478v-5.49456h.94478Zm0-10.98936h-.94478v-5.49456h.94478Zm0-10.98936h-.94478v-5.49456h.94478Zm0-10.98936h-.94478v-5.49457h.94478Zm0-10.98936h-.94478V378.745h.94478Zm0-10.98936h-.94478v-5.49457h.94478Zm0-10.98936h-.94478v-5.49457h.94478Z" transform="translate(-85.21873 -175.65252)" fill="#e5e5e5"/><rect x="523.15519" y="280.01781" width="0.94479" height="2.83436" fill="#e5e5e5"/><path d="M817.06089,459.82073H504.27977a.97891.97891,0,0,1-.97886-.97886v-149.916a.97886.97886,0,0,1,1.95772,0V457.863H817.06089a.97886.97886,0,1,1,0,1.95772Z" transform="translate(-85.21873 -175.65252)" fill="#3f3d56"/><polygon points="575.548 212.069 523.544 173.118 472.251 211.537 471.077 209.97 523.544 170.672 575.3 209.438 626.731 153.155 626.938 153.071 678.817 132.168 679.549 133.985 627.876 154.804 575.548 212.069" fill="#3f3d56"/><circle cx="471.66442" cy="210.75355" r="5.87317" fill="#43a047"/><circle cx="523.54411" cy="172.57792" r="5.87317" fill="#43a047"/><circle cx="575.42381" cy="210.75355" r="5.87317" fill="#43a047"/><circle cx="627.3035" cy="153.97954" r="5.87317" fill="#43a047"/><circle cx="679.1832" cy="132.44458" r="5.87317" fill="#43a047"/><rect x="347.26975" y="28.67555" width="2" height="353.38818" fill="#e5e5e5"/><path d="M905.98772,554.09977a7.34552,7.34552,0,0,0-1.961-11.09143l4.882-25.64286-12.52095,5.218L893.6713,546.1344a7.38532,7.38532,0,0,0,12.31642,7.96537Z" transform="translate(-85.21873 -175.65252)" fill="#ffb7b7"/><polygon points="883.2 535.797 872.598 535.797 867.554 494.903 883.202 494.904 883.2 535.797" fill="#ffb7b7"/><path d="M971.1222,721.727l-34.18529-.00126v-.43239a13.30659,13.30659,0,0,1,13.30587-13.30566h.00084l20.87921.00085Z" transform="translate(-85.21873 -175.65252)" fill="#2f2e41"/><polygon points="825.26 535.797 814.658 535.797 809.614 494.903 825.262 494.904 825.26 535.797" fill="#ffb7b7"/><path d="M910.58783,721.727l-34.18529-.00126v-.43239a13.30659,13.30659,0,0,1,13.30587-13.30566h.00084l20.87921.00085Z" transform="translate(-85.21873 -175.65252)" fill="#2f2e41"/><polygon points="824.391 363.083 814.014 386.99 805.453 524.403 827.073 523.538 832.978 458.033 851.192 399.689 861.664 464.733 865.988 521.808 883.877 522.583 891.005 363.083 824.391 363.083" fill="#2f2e41"/><path d="M961.48266,420.76584l-30.07691.75236-17.65821,9.065-.96906,66.87968-11.0131,46.17488s68.811,4.73581,78.32355-2.1824L968.84683,488.704,983.925,431.69483Z" transform="translate(-85.21873 -175.65252)" fill="#43a047"/><path d="M916.96023,431.62873l-3.21269-1.04552s-10.19135,6.54059-9.22166,22.35367c0,0-.382,8.1827-.01724,13.62852.41834,6.24634-12.10688,68.31736-12.10688,68.31736h18.16032l7.783-56.21048Z" transform="translate(-85.21873 -175.65252)" fill="#43a047"/><path d="M983.45379,554.96455a7.34552,7.34552,0,0,1,1.961-11.09143l-4.882-25.64286,12.52095,5.218,2.71649,23.55092a7.38532,7.38532,0,0,1-12.31642,7.96537Z" transform="translate(-85.21873 -175.65252)" fill="#ffb7b7"/><path d="M979.39949,432.4935l3.2127-1.04551s10.19134,6.54059,9.22166,22.35367c0,0,.382,8.1827.01724,13.62852-.41834,6.24634,5.18866,68.31736,5.18866,68.31736H978.87944l-7.783-56.21049Z" transform="translate(-85.21873 -175.65252)" fill="#43a047"/><path d="M968.86587,392.707a20.84977,20.84977,0,1,1-20.84978-20.84975h0a20.79787,20.79787,0,0,1,20.84975,20.74588Q968.866,392.655,968.86587,392.707Z" transform="translate(-85.21873 -175.65252)" fill="#ffb7b7"/><path d="M927.23562,364.702c2.44244-5.25207,7.169-4.21369,11.30278-2.43339,5.23475-1.16114,10.21334-4.63745,15.85348-2.58158,5.55578,8.08056,24.209,5.70314,20.24058,18.85835-.00519,3.15227,5.93159,1.31744,4.89514,6.48014,3.14494,9.93555-11.35179,28.752-19.674,24.78956,2.05822-3.77215,6.76-12.34-.37128-13.18978-15.34037,14.27367-1.58274-27.18028-20.85755-15.1248C932.24272,387.341,923.50556,370.544,927.23562,364.702Z" transform="translate(-85.21873 -175.65252)" fill="#2f2e41"/></svg>
```

`food-tracking-app/devtools_options.yaml`:

```yaml
description: This file stores settings for Dart & Flutter DevTools.
documentation: https://docs.flutter.dev/tools/devtools/extensions#configure-extension-enablement-states
extensions:

```

`food-tracking-app/ios\Flutter\AppFrameworkInfo.plist`:

```plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleDevelopmentRegion</key>
  <string>en</string>
  <key>CFBundleExecutable</key>
  <string>App</string>
  <key>CFBundleIdentifier</key>
  <string>io.flutter.flutter.app</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundleName</key>
  <string>App</string>
  <key>CFBundlePackageType</key>
  <string>FMWK</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
  <key>CFBundleSignature</key>
  <string>????</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>MinimumOSVersion</key>
  <string>12.0</string>
</dict>
</plist>

```

`food-tracking-app/ios\Flutter\Debug.xcconfig`:

```xcconfig
#include "Generated.xcconfig"

```

`food-tracking-app/ios\Flutter\Release.xcconfig`:

```xcconfig
#include "Generated.xcconfig"

```

`food-tracking-app/ios\Runner.xcodeproj\project.pbxproj`:

```pbxproj
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXBuildFile section */
		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
		331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 331C807B294A618700263BE5 /* RunnerTests.swift */; };
		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
		97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		331C8085294A63A400263BE5 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 97C146E61CF9000F007C117D /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 97C146ED1CF9000F007C117D;
			remoteInfo = Runner;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXCopyFilesBuildPhase section */
		9705A1C41CF9048500538489 /* Embed Frameworks */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Embed Frameworks";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
		331C807B294A618700263BE5 /* RunnerTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RunnerTests.swift; sourceTree = "<group>"; };
		331C8081294A63A400263BE5 /* RunnerTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = RunnerTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Debug.xcconfig; path = Flutter/Debug.xcconfig; sourceTree = "<group>"; };
		9740EEB31CF90195004384FC /* Generated.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Generated.xcconfig; path = Flutter/Generated.xcconfig; sourceTree = "<group>"; };
		97C146EE1CF9000F007C117D /* Runner.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Runner.app; sourceTree = BUILT_PRODUCTS_DIR; };
		97C146FB1CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		97C146EB1CF9000F007C117D /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		331C8082294A63A400263BE5 /* RunnerTests */ = {
			isa = PBXGroup;
			children = (
				331C807B294A618700263BE5 /* RunnerTests.swift */,
			);
			path = RunnerTests;
			sourceTree = "<group>";
		};
		9740EEB11CF90186004384FC /* Flutter */ = {
			isa = PBXGroup;
			children = (
				3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */,
				9740EEB21CF90195004384FC /* Debug.xcconfig */,
				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
				9740EEB31CF90195004384FC /* Generated.xcconfig */,
			);
			name = Flutter;
			sourceTree = "<group>";
		};
		97C146E51CF9000F007C117D = {
			isa = PBXGroup;
			children = (
				9740EEB11CF90186004384FC /* Flutter */,
				97C146F01CF9000F007C117D /* Runner */,
				97C146EF1CF9000F007C117D /* Products */,
				331C8082294A63A400263BE5 /* RunnerTests */,
			);
			sourceTree = "<group>";
		};
		97C146EF1CF9000F007C117D /* Products */ = {
			isa = PBXGroup;
			children = (
				97C146EE1CF9000F007C117D /* Runner.app */,
				331C8081294A63A400263BE5 /* RunnerTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		97C146F01CF9000F007C117D /* Runner */ = {
			isa = PBXGroup;
			children = (
				97C146FA1CF9000F007C117D /* Main.storyboard */,
				97C146FD1CF9000F007C117D /* Assets.xcassets */,
				97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */,
				97C147021CF9000F007C117D /* Info.plist */,
				1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */,
				1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */,
				74858FAE1ED2DC5600515810 /* AppDelegate.swift */,
				74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */,
			);
			path = Runner;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		331C8080294A63A400263BE5 /* RunnerTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */;
			buildPhases = (
				331C807D294A63A400263BE5 /* Sources */,
				331C807F294A63A400263BE5 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				331C8086294A63A400263BE5 /* PBXTargetDependency */,
			);
			name = RunnerTests;
			productName = RunnerTests;
			productReference = 331C8081294A63A400263BE5 /* RunnerTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		97C146ED1CF9000F007C117D /* Runner */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
			buildPhases = (
				9740EEB61CF901F6004384FC /* Run Script */,
				97C146EA1CF9000F007C117D /* Sources */,
				97C146EB1CF9000F007C117D /* Frameworks */,
				97C146EC1CF9000F007C117D /* Resources */,
				9705A1C41CF9048500538489 /* Embed Frameworks */,
				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Runner;
			productName = Runner;
			productReference = 97C146EE1CF9000F007C117D /* Runner.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		97C146E61CF9000F007C117D /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = YES;
				LastUpgradeCheck = 1510;
				ORGANIZATIONNAME = "";
				TargetAttributes = {
					331C8080294A63A400263BE5 = {
						CreatedOnToolsVersion = 14.0;
						TestTargetID = 97C146ED1CF9000F007C117D;
					};
					97C146ED1CF9000F007C117D = {
						CreatedOnToolsVersion = 7.3.1;
						LastSwiftMigration = 1100;
					};
				};
			};
			buildConfigurationList = 97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 97C146E51CF9000F007C117D;
			productRefGroup = 97C146EF1CF9000F007C117D /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				97C146ED1CF9000F007C117D /* Runner */,
				331C8080294A63A400263BE5 /* RunnerTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		331C807F294A63A400263BE5 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		97C146EC1CF9000F007C117D /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */,
				3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */,
				97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */,
				97C146FC1CF9000F007C117D /* Main.storyboard in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"${TARGET_BUILD_DIR}/${INFOPLIST_PATH}",
			);
			name = "Thin Binary";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
		};
		9740EEB61CF901F6004384FC /* Run Script */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Run Script";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		331C807D294A63A400263BE5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		97C146EA1CF9000F007C117D /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */,
				1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		331C8086294A63A400263BE5 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 97C146ED1CF9000F007C117D /* Runner */;
			targetProxy = 331C8085294A63A400263BE5 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		97C146FA1CF9000F007C117D /* Main.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C146FB1CF9000F007C117D /* Base */,
			);
			name = Main.storyboard;
			sourceTree = "<group>";
		};
		97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C147001CF9000F007C117D /* Base */,
			);
			name = LaunchScreen.storyboard;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		249021D3217E4FDB00AE95B9 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
				VALIDATE_PRODUCT = YES;
			};
			name = Profile;
		};
		249021D4217E4FDB00AE95B9 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Profile;
		};
		331C8088294A63A400263BE5 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Debug;
		};
		331C8089294A63A400263BE5 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Release;
		};
		331C808A294A63A400263BE5 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Profile;
		};
		97C147031CF9000F007C117D /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		97C147041CF9000F007C117D /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
				TARGETED_DEVICE_FAMILY = "1,2";
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		97C147061CF9000F007C117D /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Debug;
		};
		97C147071CF9000F007C117D /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				331C8088294A63A400263BE5 /* Debug */,
				331C8089294A63A400263BE5 /* Release */,
				331C808A294A63A400263BE5 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147031CF9000F007C117D /* Debug */,
				97C147041CF9000F007C117D /* Release */,
				249021D3217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147061CF9000F007C117D /* Debug */,
				97C147071CF9000F007C117D /* Release */,
				249021D4217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 97C146E61CF9000F007C117D /* Project object */;
}

```

`food-tracking-app/ios\Runner.xcodeproj\project.xcworkspace\contents.xcworkspacedata`:

```xcworkspacedata
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>

```

`food-tracking-app/ios\Runner.xcodeproj\project.xcworkspace\xcshareddata\IDEWorkspaceChecks.plist`:

```plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>

```

`food-tracking-app/ios\Runner.xcodeproj\project.xcworkspace\xcshareddata\WorkspaceSettings.xcsettings`:

```xcsettings
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>

```

`food-tracking-app/ios\Runner.xcodeproj\xcshareddata\xcschemes\Runner.xcscheme`:

```xcscheme
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "97C146ED1CF9000F007C117D"
               BuildableName = "Runner.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      customLLDBInitFile = "$(SRCROOT)/Flutter/ephemeral/flutter_lldbinit"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "331C8080294A63A400263BE5"
               BuildableName = "RunnerTests.xctest"
               BlueprintName = "RunnerTests"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      customLLDBInitFile = "$(SRCROOT)/Flutter/ephemeral/flutter_lldbinit"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      enableGPUValidationMode = "1"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>

```

`food-tracking-app/ios\Runner.xcworkspace\contents.xcworkspacedata`:

```xcworkspacedata
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
</Workspace>

```

`food-tracking-app/ios\Runner.xcworkspace\xcshareddata\IDEWorkspaceChecks.plist`:

```plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>

```

`food-tracking-app/ios\Runner.xcworkspace\xcshareddata\WorkspaceSettings.xcsettings`:

```xcsettings
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>

```

`food-tracking-app/ios\RunnerTests\RunnerTests.swift`:

```swift
import Flutter
import UIKit
import XCTest

class RunnerTests: XCTestCase {

  func testExample() {
    // If you add code to the Runner application, consider adding tests here.
    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
  }

}

```

`food-tracking-app/ios\Runner\AppDelegate.swift`:

```swift
import Flutter
import UIKit

@main
@objc class AppDelegate: FlutterAppDelegate {
  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    GeneratedPluginRegistrant.register(with: self)
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }
}

```

`food-tracking-app/ios\Runner\Assets.xcassets\AppIcon.appiconset\Contents.json`:

```json
{
  "images" : [
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "83.5x83.5",
      "idiom" : "ipad",
      "filename" : "Icon-App-83.5x83.5@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "1024x1024",
      "idiom" : "ios-marketing",
      "filename" : "Icon-App-1024x1024@1x.png",
      "scale" : "1x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}

```

`food-tracking-app/ios\Runner\Assets.xcassets\LaunchImage.imageset\Contents.json`:

```json
{
  "images" : [
    {
      "idiom" : "universal",
      "filename" : "LaunchImage.png",
      "scale" : "1x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@2x.png",
      "scale" : "2x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@3x.png",
      "scale" : "3x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}

```

`food-tracking-app/ios\Runner\Assets.xcassets\LaunchImage.imageset\README.md`:

```md
# Launch Screen Assets

You can customize the launch screen with your own desired assets by replacing the image files in this directory.

You can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.
```

`food-tracking-app/ios\Runner\Base.lproj\LaunchScreen.storyboard`:

```storyboard
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="12121" systemVersion="16G29" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="12089"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="EHf-IW-A2E">
            <objects>
                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="Ydg-fD-yQy"/>
                        <viewControllerLayoutGuide type="bottom" id="xbc-2k-c8Z"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <imageView opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" image="LaunchImage" translatesAutoresizingMaskIntoConstraints="NO" id="YRO-k0-Ey4">
                            </imageView>
                        </subviews>
                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
                        <constraints>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerX" secondItem="Ze5-6b-2t3" secondAttribute="centerX" id="1a2-6s-vTC"/>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerY" secondItem="Ze5-6b-2t3" secondAttribute="centerY" id="4X2-HB-R7a"/>
                        </constraints>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="53" y="375"/>
        </scene>
    </scenes>
    <resources>
        <image name="LaunchImage" width="168" height="185"/>
    </resources>
</document>

```

`food-tracking-app/ios\Runner\Base.lproj\Main.storyboard`:

```storyboard
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15F34" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="BYZ-38-t0r">
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
    </dependencies>
    <scenes>
        <!--Flutter View Controller-->
        <scene sceneID="tne-QT-ifu">
            <objects>
                <viewController id="BYZ-38-t0r" customClass="FlutterViewController" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="y3c-jy-aDJ"/>
                        <viewControllerLayoutGuide type="bottom" id="wfy-db-euE"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
            </objects>
        </scene>
    </scenes>
</document>

```

`food-tracking-app/ios\Runner\Info.plist`:

```plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>NSCameraUsageDescription</key>
	<string>Cette application a besoin d'accéder à la caméra pour scanner les codes-barres des produits alimentaires.</string>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleDisplayName</key>
	<string>Foodtrackingapp</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>foodtrackingapp</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIMainStoryboardFile</key>
	<string>Main</string>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>CADisableMinimumFrameDurationOnPhone</key>
	<true/>
	<key>UIApplicationSupportsIndirectInputEvents</key>
	<true/>
</dict>
</plist>

```

`food-tracking-app/ios\Runner\Runner-Bridging-Header.h`:

```h
#import "GeneratedPluginRegistrant.h"

```

`food-tracking-app/lib\controllers\add_food_controller.dart`:

```dart
// lib/controllers/add_food_controller.dart
import 'dart:async';
import 'package:openfoodfacts/openfoodfacts.dart';
import '../helpers/database_helper.dart';
import '../models/food_item.dart';
import '../models/portion.dart';

enum ProductResultStatus {
  success,
  notFound,
  incompleteData,
  networkError,
  timeoutError,
}

class ProductFetchResult {
  final ProductResultStatus status;
  final FoodItem? foodItem; // Ne sera présent qu'en cas de succès

  ProductFetchResult({required this.status, this.foodItem});
}

class AddFoodController {
  final Map<String, List<Product>> _searchCache = {};

  
  // Ajoute un aliment au journal du jour
  Future<void> submitFood(FoodItem item) async {
    await DatabaseHelper.instance.createFoodLog(item);
  }

  Future<List<Portion>> getPortionsForFood(String foodName) async {
    return await DatabaseHelper.instance.getPortionsForFood(foodName);
  }

  // Ajoute un aliment aux favoris et retourne si l'opération a réussi
  Future<bool> addFoodToFavorites(FoodItem item) async {
    return await DatabaseHelper.instance.createFavorite(item);
  }

  Future<List<Product>> searchProducts(String query) async {
    // On évite de lancer une recherche si la requête est trop courte
    if (query.length < 3) {
      return []; // Retourne une liste vide
    }

    if (_searchCache.containsKey(query)) {
      return _searchCache[query]!;
    }

    // On configure les paramètres de la recherche textuelle
    final ProductSearchQueryConfiguration configuration =
        ProductSearchQueryConfiguration(
      parametersList: <Parameter>[
        // On cherche les termes fournis par l'utilisateur
        SearchTerms(terms: [query]),
        SortBy(option: SortOption.POPULARITY), 
      ],
      language: OpenFoodFactsLanguage.FRENCH,
      fields: [ProductField.ALL], // On demande tous les champs pour avoir les détails
      version: ProductQueryVersion.v3, // Ajout du paramètre requis
    );

    try {
      // On lance la recherche via le client de l'API
      final SearchResult result = await OpenFoodAPIClient.searchProducts(
        null, // Le User n'est pas nécessaire pour une simple recherche
        configuration,
      );
      
      // On retourne la liste des produits trouvés, ou une liste vide si aucun résultat
      final products =  result.products ?? [];

      products.sort((a, b) {
        final nameA = a.productName?.toLowerCase() ?? '';
        final nameB = b.productName?.toLowerCase() ?? '';
        final queryLower = query.toLowerCase();

        // Règle 1 : Priorité absolue à ceux qui commencent par la recherche
        final aStartsWith = nameA.startsWith(queryLower);
        final bStartsWith = nameB.startsWith(queryLower);
        if (aStartsWith && !bStartsWith) return -1; // a remonte
        if (!aStartsWith && bStartsWith) return 1;  // b remonte

        // Règle 2 : Pénaliser les "saveurs" et "goûts"
        final aIsFlavor = nameA.contains('goût ') || nameA.contains('saveur ');
        final bIsFlavor = nameB.contains('goût ') || nameB.contains('saveur ');
        if (!aIsFlavor && bIsFlavor) return -1; // a (qui n'est pas une saveur) remonte
        if (aIsFlavor && !bIsFlavor) return 1;  // b (qui n'est pas une saveur) remonte

        // Règle 3 : Priorité aux noms plus courts
        if (nameA.length < nameB.length) return -1;
        if (nameB.length < nameA.length) return 1;

        // Si tout est égal, on ne change rien
        return 0;
      });

      _searchCache[query] = products;
      return products;

    } catch (e) {
      print("Erreur pendant la recherche de produits : $e");
      return []; // En cas d'erreur (réseau, etc.), on retourne une liste vide
    }
  }

  
  // Récupère les données d'un produit via son code-barres
  Future<ProductFetchResult> fetchProductFromBarcode(String barcode) async {
    final config = ProductQueryConfiguration(
      barcode,
      version: ProductQueryVersion.v3,
      language: OpenFoodFactsLanguage.FRENCH,
    );

    try {
      final result = await OpenFoodAPIClient.getProductV3(config);

      // Cas 1 : Le produit n'a pas été trouvé du tout
      if (result.product == null) {
        return ProductFetchResult(status: ProductResultStatus.notFound);
      }

      final product = result.product!;
      
      // Cas 2 : Le produit a été trouvé, mais il manque des données essentielles
      final calories = product.nutriments?.getValue(Nutrient.energyKCal, PerSize.oneHundredGrams);
      if (calories == null) {
        return ProductFetchResult(status: ProductResultStatus.incompleteData);
      }
      
      // Cas 3 : Succès ! Le produit est trouvé et valide.
      // On fait la conversion en FoodItem ICI, dans le controller.
      final foodItem = FoodItem(
        name: product.productName ?? 'Produit inconnu',
        caloriesPer100g: calories,
        proteinPer100g: product.nutriments?.getValue(Nutrient.proteins, PerSize.oneHundredGrams) ?? 0.0,
        carbsPer100g: product.nutriments?.getValue(Nutrient.carbohydrates, PerSize.oneHundredGrams) ?? 0.0,
        fatPer100g: product.nutriments?.getValue(Nutrient.fat, PerSize.oneHundredGrams) ?? 0.0,
        quantity: 100,
      );
      
      return ProductFetchResult(status: ProductResultStatus.success, foodItem: foodItem);

    } on TimeoutException { // <-- ON ATTRAPE SPÉCIFIQUEMENT L'ERREUR DE TIMEOUT
      print("Erreur : Timeout de la requête API après 10 secondes.");
      return ProductFetchResult(status: ProductResultStatus.timeoutError);

    } catch (e) {
      // Cas 4 : Une erreur réseau ou autre s'est produite
      print("Erreur réseau ou API : $e");
      return ProductFetchResult(status: ProductResultStatus.networkError);
    }
  }
}
```

`food-tracking-app/lib\controllers\home_controller.dart`:

```dart
// lib/controllers/home_controller.dart

import 'package:shared_preferences/shared_preferences.dart';
import '../helpers/database_helper.dart';
import '../models/food_item.dart';
import '../models/saved_meals.dart';
import '../models/daily_summary.dart';

class HomeController {

  Future<void> saveCurrentMeal(String name, List<FoodItem> items) async {
    await DatabaseHelper.instance.saveMeal(name, items);
  }

  // Logique de chargement des objectifs
  Future<Map<String, double>> loadGoals() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'calories': prefs.getDouble('goalCalories') ?? 1700,
      'carbs': prefs.getDouble('goalCarbs') ?? 150,
      'protein': prefs.getDouble('goalProtein') ?? 160,
      'fat': prefs.getDouble('goalFat') ?? 60,
    };
  }

  Future<void> clearAllFavorites() async {
    await DatabaseHelper.instance.clearFavorites();
  }

  Future<void> clearAllSavedMeals() async {
    await DatabaseHelper.instance.clearSavedMeals();
  }

  Future<bool> addFoodItemToFavorites(FoodItem item) async {
    // On appelle directement le DatabaseHelper qui contient déjà la logique
    // pour vérifier les doublons.
    return await DatabaseHelper.instance.createFavorite(item);
  }

  // Logique de chargement des favoris
  Future<List<FoodItem>> loadFavorites() async {
    return await DatabaseHelper.instance.getFavorites();
  }

  Future<List<SavedMeal>> loadSavedMeals() async {
    return await DatabaseHelper.instance.getSavedMeals();
  }

  Future<void> saveOrUpdateSummary(DailySummary summary) async {
    await DatabaseHelper.instance.saveOrUpdateSummary(summary);
  }
  
  Future<List<DailySummary>> getRecentSummaries() async {
    return await DatabaseHelper.instance.getRecentSummaries(7); // On charge les 7 derniers jours
  }

  // Logique de chargement du journal
  Future<List<FoodItem>> loadFoodLogForToday() async {
    return await DatabaseHelper.instance.getFoodLogForDate(DateTime.now());
  }

  // Logique pour vider le journal
  Future<void> clearLog() async {
    await DatabaseHelper.instance.clearFoodLog();
  }

  Future<void> deleteFoodLogItem(int id) async {
    await DatabaseHelper.instance.deleteFoodLog(id);
  }

  Future<void> updateFoodLogItemQuantity(int id, double newQuantity) async {
    await DatabaseHelper.instance.updateFoodLogQuantity(id, newQuantity);
  }

  // Logique de traitement pure (pas d'appel externe)
  Map<MealType, List<FoodItem>> groupFoodItemsByMeal(List<FoodItem> items) {
    final Map<MealType, List<FoodItem>> groupedItems = {
      MealType.breakfast: [],
      MealType.lunch: [],
      MealType.dinner: [],
      MealType.snack: [],
    };
    for (final item in items) {
      if (item.mealType != null) {
        groupedItems[item.mealType]!.add(item);
      }
    }
    return groupedItems;
  }

  Future<void> deleteSavedMeal(int id) async {
    await DatabaseHelper.instance.deleteSavedMeal(id);
  }

  // Logique de réinitialisation journalière
  // Elle retourne 'true' si le log a été vidé, sinon 'false'
  Future<bool> checkAndResetLogIfNeeded() async {
    final prefs = await SharedPreferences.getInstance();
    final bool autoResetEnabled = prefs.getBool('autoResetEnabled') ?? true;
    if (!autoResetEnabled) {
      return false;
    }

    final String? lastVisitDateStr = prefs.getString('lastVisitDate');
    final today = DateTime.now();
    final todayDateOnly = DateTime(today.year, today.month, today.day);

    if (lastVisitDateStr == null) {
      await prefs.setString('lastVisitDate', todayDateOnly.toIso8601String());
      return false;
    }

    final lastVisitDate = DateTime.parse(lastVisitDateStr);

    if (lastVisitDate.isBefore(todayDateOnly)) {
      await DatabaseHelper.instance.clearFoodLog();
      await prefs.setString('lastVisitDate', todayDateOnly.toIso8601String());
      return true; // Un reset a eu lieu
    }
    
    return false; // Pas de reset
  }
}
```

`food-tracking-app/lib\controllers\settings_controller.dart`:

```dart
import 'package:shared_preferences/shared_preferences.dart';

class SettingsController {
  // Charge tous les paramètres et les retourne dans une Map
  Future<Map<String, dynamic>> loadSettings() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'goalCalories': prefs.getDouble('goalCalories') ?? 1700,
      'goalCarbs': prefs.getDouble('goalCarbs') ?? 150,
      'goalProtein': prefs.getDouble('goalProtein') ?? 160,
      'goalFat': prefs.getDouble('goalFat') ?? 70,
    };
  }

  // Sauvegarde les objectifs
  Future<void> saveGoals(Map<String, double> goals) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble('goalCalories', goals['calories']!);
    await prefs.setDouble('goalCarbs', goals['carbs']!);
    await prefs.setDouble('goalProtein', goals['protein']!);
    await prefs.setDouble('goalFat', goals['fat']!);
  }

}
```

`food-tracking-app/lib\helpers\database_helper.dart`:

```dart
// lib/helpers/database_helper.dart

import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../models/food_item.dart';
import '../models/saved_meals.dart';
import '../models/portion.dart';
import '../models/daily_summary.dart';

class DatabaseHelper {
  // Singleton pour s'assurer qu'on a une seule instance de la BDD
  static final DatabaseHelper instance = DatabaseHelper._init();
  static Database? _database;
  DatabaseHelper._init();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDB('nutrition.db');
    return _database!;
  }

  Future<Database> _initDB(String filePath) async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, filePath);

    return await openDatabase(
      path,
      version: 4, 
      onCreate: _createDB,
      onUpgrade: _upgradeDB, // <-- On ajoute cette ligne
    );
  }

  Future<void> _upgradeDB(Database db, int oldVersion, int newVersion) async {
  // Pour cette mise à jour simple, nous allons supprimer les anciennes tables
  // et les recréer. ATTENTION : ceci efface toutes les données existantes.
  }

  // Création des tables
  Future _createDB(Database db, int version) async {

    const idType = 'INTEGER PRIMARY KEY AUTOINCREMENT';
    const textType = 'TEXT NOT NULL';
    const realType = 'REAL NOT NULL';

    // Table pour le journal quotidien
    await db.execute('''
    CREATE TABLE food_log (
      id $idType,
      name TEXT,
      mealType TEXT,
      caloriesPer100g $realType,
      proteinPer100g $realType,
      carbsPer100g $realType,
      fatPer100g $realType,
      quantity $realType,
      date TEXT NOT NULL
    )
    ''');

    // Table pour les favoris
    await db.execute('''
    CREATE TABLE favorites (
      id $idType,
      name TEXT,
      caloriesPer100g $realType,
      proteinPer100g $realType,
      carbsPer100g $realType,
      fatPer100g $realType,
      quantity $realType,
      date TEXT
    )
    ''');

    await db.execute('''
    CREATE TABLE saved_meals (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL
    )
    ''');

    await db.execute('''
    CREATE TABLE saved_meal_items (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      saved_meal_id INTEGER NOT NULL,
      name TEXT,
      caloriesPer100g REAL NOT NULL,
      proteinPer100g REAL NOT NULL,
      carbsPer100g REAL NOT NULL,
      fatPer100g REAL NOT NULL,
      quantity REAL NOT NULL,
      FOREIGN KEY (saved_meal_id) REFERENCES saved_meals (id) ON DELETE CASCADE
    )
    ''');

    await db.execute('''
    CREATE TABLE common_portions (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      food_keyword TEXT NOT NULL,
      portion_name TEXT NOT NULL,
      weight_in_grams REAL NOT NULL
    )
    ''');

    await db.execute('''
    CREATE TABLE daily_summary (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      date TEXT UNIQUE,
      total_calories REAL NOT NULL,
      total_carbs REAL NOT NULL,
      total_protein REAL NOT NULL,
      total_fat REAL NOT NULL,
      goal_calories REAL NOT NULL
    )
    ''');

    await db.execute('''
   INSERT INTO common_portions (food_keyword, portion_name, weight_in_grams) VALUES
    -- FRUITS
    ('oeuf', '1 oeuf moyen', 50),
    ('oeuf', '1 jaune', 20),
    ('oeuf', '1 blanc', 30),
    ('pomme', '1 petite', 100),
    ('pomme', '1 moyenne', 150),
    ('banane', '1 petite', 90),
    ('banane', '1 moyenne', 120),
    ('orange', '1 orange', 150),
    ('clémentine', '1 clémentine', 50),
    ('fraise', '1 poignée', 100),
    ('framboise', '1 poignée', 70),
    ('kiwi', '1 kiwi', 75),
    ('avocat', '1/2 avocat', 70),
    
    -- FÉCULENTS
    ('pain', '1 tranche (mie)', 25),
    ('pain', '1 tranche (complet)', 40),
    ('pain', '1 baguette', 250),
    ('riz', '1 portion (cuit)', 150),
    ('pâtes', '1 portion (cuites)', 180),
    ('semoule', '1 portion (cuite)', 150),
    ('pomme de terre', '1 petite', 80),
    ('pomme de terre', '1 moyenne', 120),
    ('flocons d''avoine', '1 bol', 40),
    ('lentilles', '1 portion (cuites)', 200),
    
    -- LÉGUMES
    ('tomate', '1 tomate', 120),
    ('tomate', '1 tomate cerise', 10),
    ('carotte', '1 carotte', 100),
    ('courgette', '1/2 courgette', 125),
    ('oignon', '1 oignon', 100),
    ('ail', '1 gousse', 5),
    ('salade', '1 bol', 50),
    
    -- VIANDES & POISSONS
    ('poulet', '1 filet', 120),
    ('poulet', '1 cuisse', 150),
    ('jambon', '1 tranche', 45),
    ('lardons', '1 portion', 75),
    ('steak', '1 steak haché', 100),
    ('saumon', '1 pavé', 130),
    ('thon', '1 petite boîte', 90),
    
    -- PRODUITS LAITIERS
    ('lait', '1 verre', 200),
    ('lait', '1 bol', 250),
    ('yaourt', '1 pot', 125),
    ('fromage blanc', '1 portion', 100),
    ('camembert', '1/8 de part', 30),
    ('fromage', '1 tranche', 30),
    ('parmesan', '1 c. à soupe', 10),
    
    -- SUCRES, GRAS & AUTRES
    ('sucre', '1 morceau', 5),
    ('sucre', '1 c. à café', 5),
    ('huile', '1 c. à soupe', 10),
    ('beurre', '1 noisette', 10),
    ('confiture', '1 c. à café', 15),
    ('miel', '1 c. à café', 10),
    ('chocolat', '1 carré', 10),
    ('amandes', '1 poignée', 25),
    ('noix', '1 poignée', 25)
    ''');
  }

  // --- Opérations sur le Journal ---

  Future<FoodItem> createFoodLog(FoodItem item) async {
    final db = await instance.database;
    final id = await db.insert('food_log', item.toMap());

    return item.copyWith(); // On pourrait retourner avec l'ID mais pas essentiel ici
  }

  // Vide toute la table des favoris
  Future<void> clearFavorites() async {
    final db = await instance.database;
    await db.delete('favorites');
    print('🗑️ Table des favoris vidée.');
  }

  // Vide toute la table des repas sauvegardés (et les items associés par cascade)
  Future<void> clearSavedMeals() async {
    final db = await instance.database;
    await db.delete('saved_meals');
    print('🗑️ Table des repas sauvegardés vidée.');
  }

  Future<List<FoodItem>> getFoodLogForDate(DateTime date) async {
    final db = await instance.database;

    final maps = await db.query(
      'food_log',
      // Pour matcher tous les items
      orderBy: 'id DESC',
    );

    if (maps.isNotEmpty) {
      return maps.map((json) => FoodItem.fromMap(json)).toList();
    } else {
      return [];
    }
  }

  Future<int> deleteFoodLog(int id) async {
    final db = await instance.database;
    return await db.delete('food_log', where: 'id = ?', whereArgs: [id]);
  }

  Future<int> clearFoodLog() async {
      final db = await instance.database;
      return await db.delete('food_log');
  }

  Future<int> updateFoodLogQuantity(int id, double newQuantity) async {
    final db = await instance.database;
    return await db.update(
      'food_log',
      {'quantity': newQuantity},
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  // Sauvegarde ou met à jour le résumé du jour (logique "Upsert")
  Future<void> saveOrUpdateSummary(DailySummary summary) async {
    final db = await instance.database;
    await db.insert(
      'daily_summary',
      summary.toMap(),
      // Si une entrée pour cette date existe déjà, on la remplace.
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
  }

  // Récupère les résumés des X derniers jours
  Future<List<DailySummary>> getRecentSummaries(int days) async {
    final db = await instance.database;
    final maps = await db.query(
      'daily_summary',
      orderBy: 'date DESC',
      limit: days,
    );
    return maps.map((map) => DailySummary.fromMap(map)).toList();
  }

  // --- Opérations sur les Favoris ---

  Future<bool> createFavorite(FoodItem item) async {
    final db = await instance.database;

    final existing = await db.query(
      'favorites',
      where: 'name = ?',
      whereArgs: [item.name],
      limit: 1, // Pas besoin de chercher plus loin qu'une seule correspondance
    );

    if (existing.isEmpty) {
      final Map<String, dynamic> favoriteMap = {
        'name': item.name,
        'caloriesPer100g': item.caloriesPer100g,
        'proteinPer100g': item.proteinPer100g,
        'carbsPer100g': item.carbsPer100g,
        'fatPer100g': item.fatPer100g,
        'quantity': item.quantity,
      };

      await db.insert('favorites', favoriteMap);
      return true;
   } else {
    return false;
   }
  }

  Future<int> deleteFavorite(int id) async {
    final db = await instance.database;
    
    return await db.delete(
      'favorites',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<List<FoodItem>> getFavorites() async {
    final db = await instance.database;
    final maps = await db.query('favorites', orderBy: 'name ASC');

    if (maps.isNotEmpty) {
      return maps.map((json) => FoodItem.fromMap(json)).toList();
    } else {
      return [];
    }
  }

  Future<List<Portion>> getPortionsForFood(String foodName) async {
    final db = await instance.database;
    final lowerFoodName = foodName.toLowerCase();

    // Cette recherche est simple mais efficace pour commencer
    final res = await db.query(
      'common_portions',
      where: 'food_keyword IN (SELECT value FROM json_each(?) WHERE value LIKE ?)',
      whereArgs: [
        '["${lowerFoodName.split(' ').join('","')}"]',
        '%${lowerFoodName.split(' ').first}%'
      ],
    );

    if (res.isNotEmpty) {
      return res.map((json) => Portion(
        name: json['portion_name'] as String,
        weightInGrams: json['weight_in_grams'] as double,
      )).toList();
    }
    return [];
  }

  //opérations sur les repas sauvegardés
  Future<void> saveMeal(String name, List<FoodItem> items) async {
    final db = await instance.database;

    // Utilise une transaction pour s'assurer que toutes les opérations réussissent ou échouent ensemble
    await db.transaction((txn) async {
      // 1. Insère le nom du repas et récupère son nouvel ID
      final mealId = await txn.insert('saved_meals', {'name': name});

      // 2. Pour chaque aliment du repas, on l'insère dans la table des items
      for (final item in items) {
        final itemMap = {
          'saved_meal_id': mealId,
          'name': item.name,
          'caloriesPer100g': item.caloriesPer100g,
          'proteinPer100g': item.proteinPer100g,
          'carbsPer100g': item.carbsPer100g,
          'fatPer100g': item.fatPer100g,
          'quantity': item.quantity,
        };
        await txn.insert('saved_meal_items', itemMap);
      }
    });
    print('✅ Repas "$name" sauvegardé avec ${items.length} aliments.');
  }

  Future<List<SavedMeal>> getSavedMeals() async {
    final db = await instance.database;
    final List<SavedMeal> savedMeals = [];

    // 1. Récupère tous les repas sauvegardés (juste leur nom et ID)
    final mealsMaps = await db.query('saved_meals');

    // 2. Pour chaque repas, on va chercher les aliments qui lui sont associés
    for (final mealMap in mealsMaps) {
      final mealId = mealMap['id'] as int;
      final mealName = mealMap['name'] as String;

      final itemsMaps = await db.query(
        'saved_meal_items',
        where: 'saved_meal_id = ?',
        whereArgs: [mealId],
      );

      final List<FoodItem> items = itemsMaps.map((itemMap) {
        // On doit recréer un FoodItem. Comme on n'a pas tous les champs,
        // on peut utiliser des valeurs par défaut ou null.
        return FoodItem.fromMap(itemMap);
      }).toList();

      savedMeals.add(SavedMeal(id: mealId, name: mealName, items: items));
    }
    return savedMeals;
  }

  Future<int> deleteSavedMeal(int id) async {
    final db = await instance.database;
    print('🗑️ Suppression du repas sauvegardé avec id: $id');
    
    // Grâce à "ON DELETE CASCADE", supprimer ceci supprimera aussi tous les
    // 'saved_meal_items' associés.
    return await db.delete(
      'saved_meals',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future close() async {
    final db = await instance.database;
    db.close();
  }
}
```

`food-tracking-app/lib\main.dart`:

```dart
import 'package:flutter/material.dart';
import '/screens/home_screen.dart';
import 'package:openfoodfacts/openfoodfacts.dart';
import 'package:intl/date_symbol_data_local.dart'; 
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';
import 'providers/theme_provider.dart'; // <-- Importer notre nouvelle classe

Future<void> deleteDb() async {
  final dbPath = await getDatabasesPath();
  final path = join(dbPath, 'nutrition.db');
  await deleteDatabase(path);
}

void main() async {
  OpenFoodAPIConfiguration.userAgent = UserAgent(
    name:'MonSuiviNutritionnel', // Nom de votre application
    version:'0.1',
  );

  WidgetsFlutterBinding.ensureInitialized(); 
  await initializeDateFormatting('fr_FR', null);

  runApp(
    ChangeNotifierProvider(
      create: (context) => ThemeProvider(),
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {

    final themeProvider = Provider.of<ThemeProvider>(context);

    return MaterialApp(
      title: 'Mon Suivi Nutritionnel',
      themeMode: themeProvider.themeMode,

      theme: ThemeData(
        
        useMaterial3: true,

        scaffoldBackgroundColor: const Color(0xFFF8F9FA), // Un gris très clair et neutre

        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.green,
          primary: Colors.green.shade600, // Un vert un peu plus soutenu pour les accents
          surface: const Color(0xFFF8F9FA),
          background: const Color(0xFFF8F9FA), // Le même que le scaffold
        ),

        // Un thème personnalisé pour toutes les cartes de l'application
        cardTheme: CardThemeData(
          elevation: 1.5, // Une ombre très subtile pour un effet de flottement
          shadowColor: Colors.black.withOpacity(0.08), // Une ombre douce
          surfaceTintColor: Colors.white, // Très important pour garder les cartes blanches en Material 3
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0))
        ),
            
        textTheme: GoogleFonts.poppinsTextTheme(ThemeData.light().textTheme).copyWith(
          // Style pour les grands titres (ex: "Bonjour !")
          headlineSmall: GoogleFonts.poppins(
            fontSize: 22,
            fontWeight: FontWeight.bold,
            color: const Color(0xFF343A40), // Un noir/gris très foncé
          ),
          // Style pour les titres de section ou de carte
          titleLarge: GoogleFonts.poppins(
            fontSize: 18,
            fontWeight: FontWeight.w600, // Semi-gras
            color: const Color(0xFF343A40),
          ),
          // Style pour le corps de texte normal
          bodyMedium: GoogleFonts.poppins(
            fontSize: 14,
            color: Colors.grey[800],
          ),
          // Style pour les textes secondaires ou les sous-titres
          bodySmall: GoogleFonts.poppins(
            fontSize: 12,
            color: Colors.grey[600],
          ),
        ),

        inputDecorationTheme: InputDecorationTheme(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12.0),
            borderSide: const BorderSide(color: Color(0xFFEEEEEE)),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12.0),
            borderSide: BorderSide(color: Colors.grey.shade300),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12.0),
            borderSide: BorderSide(color: const Color(0xFF43A047), width: 2.0),
          ),
          filled: true,
          fillColor: Colors.white,
        ),

      ),

      darkTheme: ThemeData(
        useMaterial3: true,
        scaffoldBackgroundColor: const Color(0xFF121212), // Un noir très foncé
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.green,
          brightness: Brightness.dark, // On spécifie que c'est un thème sombre
          surface: const Color(0xFF1E1E1E), // Des cartes légèrement plus claires
        ),
        // Le thème de texte s'adaptera automatiquement (texte blanc sur fond sombre)
        textTheme: GoogleFonts.poppinsTextTheme(ThemeData.dark().textTheme),
        cardTheme: CardThemeData(
          elevation: 1.0,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
        ),
        ),

      home: const HomeScreen(), // L'écran principal est HomeScreen
    );
  }
}

```

`food-tracking-app/lib\models\daily_summary.dart`:

```dart
// lib/models/daily_summary.dart

class DailySummary {
  final int? id;
  final DateTime date;
  final double totalCalories;
  final double totalCarbs;
  final double totalProtein;
  final double totalFat;
  final double goalCalories;

  DailySummary({
    this.id,
    required this.date,
    required this.totalCalories,
    required this.totalCarbs,
    required this.totalProtein,
    required this.totalFat,
    required this.goalCalories,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'date': date.toIso8601String().substring(0, 10), // On stocke la date au format YYYY-MM-DD
      'total_calories': totalCalories,
      'total_carbs': totalCarbs,
      'total_protein': totalProtein,
      'total_fat': totalFat,
      'goal_calories': goalCalories,
    };
  }

  factory DailySummary.fromMap(Map<String, dynamic> map) {
    return DailySummary(
      id: map['id'],
      date: DateTime.parse(map['date']),
      totalCalories: map['total_calories'],
      totalCarbs: map['total_carbs'],
      totalProtein: map['total_protein'],
      totalFat: map['total_fat'],
      goalCalories: map['goal_calories'],
    );
  }
}
```

`food-tracking-app/lib\models\food_item.dart`:

```dart
enum MealType { breakfast, lunch, dinner, snack }

extension MealTypeExtension on MealType {
  String get frenchName {
    switch (this) {
      case MealType.breakfast:
        return 'Petit-déjeuner';
      case MealType.lunch:
        return 'Déjeuner';
      case MealType.dinner:
        return 'Dîner';
      case MealType.snack:
        return 'Collation';
    }
  }
}

class FoodItem {
  final int? id;
  final String? name;
  final double caloriesPer100g;
  final double proteinPer100g;
  final double carbsPer100g;
  final double fatPer100g;
  double? quantity;
  final MealType? mealType;
  final DateTime? date;

  FoodItem({
    this.id,
    this.name,
    required this.caloriesPer100g,
    required this.proteinPer100g,
    required this.carbsPer100g,
    required this.fatPer100g,
    this.quantity,
    this.mealType,
    this.date,
  });

  // Calcule les valeurs en fonction de la quantité consommée
  double get totalCalories => (caloriesPer100g / 100) * (quantity ?? 0);
  double get totalProtein => (proteinPer100g / 100) * (quantity ?? 0);
  double get totalCarbs => (carbsPer100g / 100) * (quantity ?? 0);
  double get totalFat => (fatPer100g / 100) * (quantity ?? 0);

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'mealType': mealType?.name, 
      'caloriesPer100g': caloriesPer100g,
      'proteinPer100g': proteinPer100g,
      'carbsPer100g': carbsPer100g,
      'fatPer100g': fatPer100g,
      'quantity': quantity,
      // On stocke la date en format ISO 8601 (String)
      'date': date?.toIso8601String(), 
    };
  }

  factory FoodItem.fromMap(Map<String, dynamic> map) {
    return FoodItem(
      id: map['id'],
      name: map['name'],
      caloriesPer100g: map['caloriesPer100g'],
      proteinPer100g: map['proteinPer100g'],
      carbsPer100g: map['carbsPer100g'],
      fatPer100g: map['fatPer100g'],
      quantity: map['quantity'],
      mealType: map['mealType'] != null
          ? MealType.values.byName(map['mealType'])
          : null,
      // On parse la date stockée en String
      date: map['date'] != null ? DateTime.parse(map['date']) : null,
    );
  }

  FoodItem copyWith({
    int? id,
    String? name,
    double? caloriesPer100g,
    double? proteinPer100g,
    double? carbsPer100g,
    double? fatPer100g,
    double? quantity,
    MealType? mealType,
    DateTime? date,

    bool forceIdToNull = false, 
  }) {
    return FoodItem(
      id: forceIdToNull ? null : (id ?? this.id),
      name: name ?? this.name,
      caloriesPer100g: caloriesPer100g ?? this.caloriesPer100g,
      proteinPer100g: proteinPer100g ?? this.proteinPer100g,
      carbsPer100g: carbsPer100g ?? this.carbsPer100g,
      fatPer100g: fatPer100g ?? this.fatPer100g,
      quantity: quantity ?? this.quantity,
      mealType: mealType ?? this.mealType,
      date: date ?? this.date,
    );
  }
 }

```

`food-tracking-app/lib\models\portion.dart`:

```dart
// lib/models/portion.dart
class Portion {
  final String name;
  final double weightInGrams;

  Portion({required this.name, required this.weightInGrams});
}
```

`food-tracking-app/lib\models\saved_meals.dart`:

```dart
// lib/models/saved_meal.dart
import 'food_item.dart';

class SavedMeal {
  final int? id;
  final String name;
  final List<FoodItem> items;

  SavedMeal({
    this.id,
    required this.name,
    required this.items,
  });
}
```

`food-tracking-app/lib\providers\theme_provider.dart`:

```dart
// lib/providers/theme_provider.dart
import 'package:flutter/material.dart';

class ThemeProvider with ChangeNotifier {
  ThemeMode _themeMode = ThemeMode.system;

  ThemeMode get themeMode => _themeMode;

  void setThemeMode(ThemeMode mode) {
    _themeMode = mode;
    notifyListeners(); // Notifie les auditeurs d'un changement
  }
}
```

`food-tracking-app/lib\screens\add_food_screen.dart`:

```dart
import 'package:flutter/material.dart';
import '../models/food_item.dart';
import '../models/portion.dart';
import '../helpers/database_helper.dart';
import 'barcode_scanner_screen.dart';
import '../controllers/add_food_controller.dart';
import 'dart:async'; // Pour gérer le délai de recherche
import 'package:openfoodfacts/openfoodfacts.dart'; // Pour utiliser le type Product
import '../widgets/common/secondary_button.dart';
import '../widgets/common/primary_button.dart';

class AddFoodScreen extends StatefulWidget {

  final FoodItem? initialFoodItem;
  final MealType mealType;

  const AddFoodScreen({super.key, required this.mealType, this.initialFoodItem});
  
  @override
  State<AddFoodScreen> createState() => _AddFoodScreenState();
}

class _AddFoodScreenState extends State<AddFoodScreen> {
  final _controller = AddFoodController();
  final _formKey = GlobalKey<FormState>();

  // --- NOUVELLES VARIABLES D'ÉTAT POUR LA RECHERCHE ---
  final _searchController = TextEditingController();
  bool _useGrams = true; // Par défaut, on saisit en grammes
  List<Portion> _availablePortions = [];
  Portion? _selectedPortion;
  final _portionQuantityController = TextEditingController(text: '1');
  List<Product> _searchResults = [];
  bool _isSearching = false; // Pour afficher un indicateur de chargement
  Timer? _debounce; // Pour ne pas lancer une recherche à chaque lettre tapée

  // Contrôleurs de champ
  final _nameController = TextEditingController();
  final _caloriesController = TextEditingController();
  final _proteinController = TextEditingController();
  final _carbsController = TextEditingController();
  final _fatController = TextEditingController();
  final _quantityController = TextEditingController();

  @override
  void initState() {
    super.initState();
    // Si un aliment initial est fourni (par le scanner), on remplit les champs
    _searchController.addListener(_onSearchChanged);
    if (widget.initialFoodItem != null) {
      _populateFields(widget.initialFoodItem!);
    }
  }

  void _populateFields(FoodItem food) {
    _nameController.text = food.name ?? '';
    _caloriesController.text = food.caloriesPer100g.toStringAsFixed(1);
    _proteinController.text = food.proteinPer100g.toStringAsFixed(1);
    _carbsController.text = food.carbsPer100g.toStringAsFixed(1);
    _fatController.text = food.fatPer100g.toStringAsFixed(1);
    _quantityController.text = food.quantity?.toStringAsFixed(0) ?? '0';
  }

  @override
  void dispose() {
    // Nettoyage
    _nameController.dispose();
    _caloriesController.dispose();
    _proteinController.dispose();
    _carbsController.dispose();
    _fatController.dispose();
    _quantityController.dispose();
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    _debounce?.cancel();

    super.dispose();
  }

  void _onSearchChanged() {
    // Annule le timer précédent à chaque nouvelle lettre
    if (_debounce?.isActive ?? false) _debounce!.cancel();
    
    // Démarre un nouveau timer de 500ms
    _debounce = Timer(const Duration(milliseconds: 500), () async {
      // Une fois le timer écoulé, on lance la recherche
      if (_searchController.text.length < 3) {
        setState(() { _searchResults = []; });
        return;
      }
      setState(() { _isSearching = true; });
      final results = await _controller.searchProducts(_searchController.text);
      if (mounted) {
        setState(() {
          _searchResults = results;
          _isSearching = false;
        });
      }
    });
  }

  Future<void> _onProductSelected(Product product) async {
    // On utilise la même logique que pour le scan pour pré-remplir les champs
    _populateFieldsFromProduct(product);

    List<Portion> portions = [];

    final String? servingSizeFromApi = product.servingSize;
    if (servingSizeFromApi != null && servingSizeFromApi.isNotEmpty) {
      // On essaie d'extraire le poids en grammes de la chaîne de texte (ex: "50 g")
      final RegExp regex = RegExp(r'(\d+(\.\d+)?)');
      final Match? match = regex.firstMatch(servingSizeFromApi);
      if (match != null) {
        final double? weight = double.tryParse(match.group(1)!);
        if (weight != null) {
          print('ℹ️ Portion trouvée via API : $servingSizeFromApi');
          portions.add(Portion(name: '1 portion ($servingSizeFromApi)', weightInGrams: weight));
        }
      }
    }

    if (portions.isEmpty) {
      print('ℹ️ Aucune portion API, recherche dans la base de données locale...');
      portions = await _controller.getPortionsForFood(product.productName ?? '');
    }

    // On vide la recherche pour cacher la liste des résultats
    setState(() {
      _availablePortions = portions;
      if (portions.isNotEmpty) {
        _selectedPortion = portions.first;
        _useGrams = false; // On passe en mode portion
      } else {
        _useGrams = true; // On reste en mode grammes
      }
      _searchController.clear();
      _searchResults = [];
    });
    FocusScope.of(context).unfocus();
  }

  void _populateFieldsFromProduct(Product product) {
    final calories = product.nutriments?.getValue(Nutrient.energyKCal, PerSize.oneHundredGrams);
    // On ne pré-remplit que si les données de base sont là
    if (calories != null) {
      _nameController.text = product.productName ?? '';
      _caloriesController.text = calories.toStringAsFixed(2);
      _proteinController.text = (product.nutriments?.getValue(Nutrient.proteins, PerSize.oneHundredGrams) ?? 0.0).toStringAsFixed(2);
      _carbsController.text = (product.nutriments?.getValue(Nutrient.carbohydrates, PerSize.oneHundredGrams) ?? 0.0).toStringAsFixed(2);
      _fatController.text = (product.nutriments?.getValue(Nutrient.fat, PerSize.oneHundredGrams) ?? 0.0).toStringAsFixed(2);
      _quantityController.text = '100';
    } else {
      // Si le produit est incomplet, on informe l'utilisateur
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Ce produit n\'a pas de données nutritionnelles complètes.'))
      );
    }
  }

  Future<void> _addToFavorites(FoodItem item) async {
    final success = await _controller.addFoodToFavorites(item);

    if (!mounted) return;

    if (success) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Nouveau favori enregistré')),
      );
      // On ferme l'écran uniquement en cas de succès
      Navigator.pop(context, true);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Cet aliment est déjà dans vos favoris')),
      );
    }
  }

  void _submitForm() async {    
     if (_formKey.currentState!.validate()) {
      double finalQuantity;
      // On calcule la quantité finale en grammes
      if (_useGrams) {
        finalQuantity = double.parse(_quantityController.text);
      } else {
        final portionCount = double.tryParse(_portionQuantityController.text) ?? 1.0;
        final portionWeight = _selectedPortion?.weightInGrams ?? 0.0;
        finalQuantity = portionCount * portionWeight; 
      }

      final item = FoodItem(
        name: _nameController.text.isEmpty ? 'Aliment' : _nameController.text,
        mealType: widget.mealType,
        caloriesPer100g: double.parse(_caloriesController.text),
        proteinPer100g: double.parse(_proteinController.text),
        carbsPer100g: double.parse(_carbsController.text),
        fatPer100g: double.parse(_fatController.text),
        quantity: finalQuantity,
        date: DateTime.now(),
      );

      await DatabaseHelper.instance.createFoodLog(item);
  }
      if (context.mounted) {
        Navigator.pop(context, true); // On retourne 'true' pour rafraîchir la home page
      }
      
  }

  Widget _buildQuantityInput() {
  return Column(
    children: [

      const SizedBox(height: 24),
      // Sélecteur pour choisir entre Grammes et Portions
      ToggleButtons(
        isSelected: [_useGrams, !_useGrams],
        onPressed: (index) {
          // On ne peut pas désactiver les portions s'il n'y en a pas de disponible
          if (index == 1 && _availablePortions.isEmpty) return;
          setState(() {
            _useGrams = index == 0;
          });
        },
        borderRadius: BorderRadius.circular(8.0),
        children: const [
          Padding(padding: EdgeInsets.symmetric(horizontal: 16), child: Text('Grammes')),
          Padding(padding: EdgeInsets.symmetric(horizontal: 16), child: Text('Portions')),
        ],
      ),
      const SizedBox(height: 16),

      // On affiche le champ de saisie correspondant au mode choisi
      _useGrams
          ? _buildTextField(label: 'Quantité (g)', controller: _quantityController, isNumeric: true)
          : Row(
              children: [
                Expanded(
                  flex: 2,
                  child: TextFormField(
                    controller: _portionQuantityController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(labelText: 'Nombre'),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  flex: 3,
                  child: DropdownButtonFormField<Portion>(
                    value: _selectedPortion,
                    items: _availablePortions.map((p) => DropdownMenuItem(value: p, child: Text(p.name))).toList(),
                    onChanged: (portion) => setState(() => _selectedPortion = portion),
                    decoration: const InputDecoration(labelText: 'Portion'),
                  ),
                ),
              ],
            ),
    ],
  );
}

  Widget _buildTextField(
    {required String label,
    required TextEditingController controller,
    bool isNumeric = false}) {
  return TextFormField(
    controller: controller,
    keyboardType:
        isNumeric ? const TextInputType.numberWithOptions(decimal: true) : TextInputType.text,
    decoration: InputDecoration(labelText: label),
    validator: (value) {
      if (isNumeric) {
        if (value == null || value.isEmpty) return 'Champ requis';
        final parsed = double.tryParse(value);
        if (parsed == null || parsed < 0) return 'Nombre invalide';
      }
      return null;
    },
  );
  }

  void _scanBarcode() async {
    // On navigue vers l'écran de scan et on attend un résultat
    final FoodItem? scannedFood = await Navigator.push(
      context,
      MaterialPageRoute(
        // On passe notre instance de controller à l'écran de scan
        builder: (context) => BarcodeScannerScreen(controller: _controller),
      ),
    );

    // Si on a reçu un aliment en retour (scan réussi et données valides)
    if (scannedFood != null && mounted) {
      // On utilise la méthode qui pré-remplit les champs du formulaire
      _populateFields(scannedFood);
    }
  }


@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('Ajouter un aliment'),
      // On place le bouton de scan ici pour un accès facile et permanent
      actions: [
        IconButton(
          icon: const Icon(Icons.qr_code_scanner),
          tooltip: 'Scanner un code-barres',
          onPressed: _scanBarcode, 
        ),
      ],
    ),
    body: Column(
      children: [
        // --- 1. LA BARRE DE RECHERCHE ---
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: TextField(
            controller: _searchController,
            decoration: InputDecoration(
              labelText: 'Rechercher un aliment...',
              hintText: 'Ex: Yaourt nature, banane...',
              suffixIcon: _isSearching
                  ? const Padding(padding: EdgeInsets.all(12.0), child: CircularProgressIndicator(strokeWidth: 2.0))
                  : const Icon(Icons.search),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
              ),
            ),
          ),
        ),

        // --- 2. LA ZONE DE CONTENU DYNAMIQUE ---
        // On utilise Expanded pour que cette zone prenne tout l'espace restant
        Expanded(
          child:
              // Si on a des résultats de recherche, on les affiche
              _searchResults.isNotEmpty
                  ? _buildSearchResultsList()
                  // Sinon, on affiche le formulaire de saisie manuelle
                  : _buildManualEntryForm(),
        ),
      ],
    ),
  );
}

// lib/screens/add_food_screen.dart > _AddFoodScreenState

// NOUVELLE MÉTHODE qui construit la liste des résultats de recherche
Widget _buildSearchResultsList() {
  return ListView.builder(
    itemCount: _searchResults.length,
    itemBuilder: (context, index) {
      final product = _searchResults[index];
      // On récupère l'URL de l'image miniature du produit
      final imageUrl = product.imageFrontSmallUrl;

      return ListTile(
        // --- LA MODIFICATION EST ICI, DANS LE 'leading' ---
        leading: SizedBox(
          width: 56, // On donne une taille fixe à l'image
          height: 56,
          child: ClipRRect( // Pour avoir de jolis coins arrondis
            borderRadius: BorderRadius.circular(8.0),
            child: (imageUrl != null && imageUrl.isNotEmpty)
                // Si l'URL de l'image existe, on l'affiche
                ? Image.network(
                    imageUrl,
                    fit: BoxFit.cover, // Pour que l'image remplisse bien le carré
                    // Affiche un indicateur de chargement pendant que l'image télécharge
                    loadingBuilder: (context, child, loadingProgress) {
                      if (loadingProgress == null) return child;
                      return const Center(child: CircularProgressIndicator(strokeWidth: 2.0));
                    },
                    // Affiche une icône d'erreur si l'image ne peut être chargée
                    errorBuilder: (context, error, stackTrace) {
                      return const Icon(Icons.image_not_supported_outlined, color: Colors.grey);
                    },
                  )
                // Sinon, on affiche une icône par défaut
                : Container(
                    color: Colors.grey[200],
                    child: const Icon(Icons.fastfood_outlined, color: Colors.grey),
                  ),
          ),
        ),
        title: Text(product.productName ?? 'Produit sans nom'),
        subtitle: Text(product.brands ?? 'Marque inconnue'),
        onTap: () => _onProductSelected(product),
      );
    },
  );
}

Widget _buildManualEntryForm() {
  // On reprend le code de votre ancien 'body' ici
  return Padding(
    padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
    child: Form(
      key: _formKey,
      child: ListView(
        children: [
          Center(
            child: Text(
              'Ou entrez les valeurs manuellement',
              style: TextStyle(color: Colors.grey[600]),
            ),
          ),
          const SizedBox(height: 16),
          _buildTextField(label: 'Nom', controller: _nameController),
          _buildTextField(label: 'Calories / 100g', controller: _caloriesController, isNumeric: true),
          _buildTextField(label: 'Protéines / 100g', controller: _proteinController, isNumeric: true),
          _buildTextField(label: 'Glucides / 100g', controller: _carbsController, isNumeric: true),
          _buildTextField(label: 'Lipides / 100g', controller: _fatController, isNumeric: true),
          _buildQuantityInput(),
          const SizedBox(height: 20),
          PrimaryButton(
            text: 'Ajouter au journal',
            onPressed: _submitForm,
          ),
          SecondaryButton(
            text: 'Ajouter aux favoris',
            icon: Icons.star_border_outlined,
            onPressed: () {
              if (_formKey.currentState!.validate()) {
                final item = FoodItem(
                  name: _nameController.text.isEmpty ? 'Aliment' : _nameController.text,
                  mealType: widget.mealType,
                  caloriesPer100g: double.parse(_caloriesController.text),
                  proteinPer100g: double.parse(_proteinController.text),
                  carbsPer100g: double.parse(_carbsController.text),
                  fatPer100g: double.parse(_fatController.text),
                  quantity: 100,
                  date: DateTime.now(),
                );
                _addToFavorites(item);
              }
            },
          ),
        ],
      ),
    ),
  );
}

}



```

`food-tracking-app/lib\screens\barcode_scanner_screen.dart`:

```dart
// lib/screens/barcode_scanner_screen.dart

import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import '../controllers/add_food_controller.dart'; // Importer le controller

class BarcodeScannerScreen extends StatefulWidget {
  // On s'assure qu'il reçoit bien le controller en paramètre
  final AddFoodController controller;

  const BarcodeScannerScreen({
    super.key,
    required this.controller,
  });

  @override
  State<BarcodeScannerScreen> createState() => _BarcodeScannerScreenState();
}

class _BarcodeScannerScreenState extends State<BarcodeScannerScreen> {
   bool _isTorchOn = false;

  final MobileScannerController _scannerController = MobileScannerController();
  bool _isProcessing = false;

  // L'ancienne méthode _fetchProductData qui était dans ce fichier peut être supprimée.

  // Voici la nouvelle méthode _onBarcodeDetected, qui utilise le controller.
  Future<void> _onBarcodeDetected(BarcodeCapture capture) async {
    if (_isProcessing) return;

    final Barcode? barcode = capture.barcodes.firstOrNull;
    if (barcode == null || barcode.rawValue == null) return;

    setState(() { _isProcessing = true; });

    final String code = barcode.rawValue!;
    
    // Affiche la popup de chargement
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => const Center(child: CircularProgressIndicator()),
    );

    // ON APPELLE NOTRE CONTROLLER INTELLIGENT
    final result = await widget.controller.fetchProductFromBarcode(code);

    if (!mounted) return;
    Navigator.of(context).pop(); // Ferme la popup de chargement DANS TOUS LES CAS

    // ON UTILISE UN SWITCH POUR TRAITER PROPREMENT CHAQUE CAS DE RÉPONSE
    switch (result.status) {
      
      case ProductResultStatus.success:
        // Succès : on renvoie le FoodItem déjà préparé par le controller
        Navigator.of(context).pop(result.foodItem);
        break;

      case ProductResultStatus.notFound:
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Produit non trouvé dans la base de données.')),
        );
        break;

      case ProductResultStatus.incompleteData:
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Produit trouvé, mais données nutritionnelles manquantes.')),
        );
        break;

      case ProductResultStatus.networkError:
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Erreur réseau. Vérifiez votre connexion internet.')),
        );
        break;

        case ProductResultStatus.timeoutError:
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('La requête a expiré. Veuillez réessayer.')),
        );
        break;
    }
    
    // Après une erreur, on réactive le scanner pour un nouvel essai
    if (result.status != ProductResultStatus.success) {
      Future.delayed(const Duration(seconds: 2), () {
        if (mounted) setState(() { _isProcessing = false; });
      });
    }
  }
  
  @override
  Widget build(BuildContext context) {
    final scanWindow = Rect.fromCenter(
      center: MediaQuery.of(context).size.center(Offset.zero),
      width: 250,
      height: 150,
    );

    return Scaffold(
      // On retire l'AppBar pour une immersion totale
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Couche 1 : La vue de la caméra
          MobileScanner(
            // La fenêtre de scan permet au scanner d'être plus performant
            scanWindow: scanWindow,
            controller: _scannerController,
            onDetect: _onBarcodeDetected,
          ),
          
          // Couche 2 : L'overlay semi-transparent avec le trou
          CustomPaint(
            painter: ScannerOverlay(scanWindow),
          ),
          
          // Couche 3 : Les boutons et textes d'aide
          Positioned(
            top: 60,
            left: 20,
            child: IconButton(
              icon: const Icon(Icons.arrow_back_ios, color: Colors.white),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ),
          Positioned(
            top: 60,
            right: 20,
            child: IconButton(
              color: _isTorchOn ? Colors.yellow.shade700 : Colors.white,
              icon: Icon(_isTorchOn ? Icons.flash_on_outlined : Icons.flash_off_outlined),
              onPressed: () async {
               await  _scannerController.toggleTorch();
               setState((){
                _isTorchOn = !_isTorchOn;
               });
              },
              tooltip: 'Lampe torche',
            ),
          ),
          Positioned(
            bottom: 100,
            left: 0,
            right: 0,
            child: Text(
              'Visez le code-barres',
              textAlign: TextAlign.center,
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _scannerController.dispose();
    super.dispose();
  }
}

class ScannerOverlay extends CustomPainter {
  ScannerOverlay(this.scanWindow);

  final Rect scanWindow;

  @override
  void paint(Canvas canvas, Size size) {
    final backgroundPath = Path()..addRect(Rect.largest);
    final cutoutPath = Path()..addRect(scanWindow);

    // On crée un fond semi-transparent qui couvre tout l'écran
    final backgroundPaint = Paint()
      ..color = Colors.black.withOpacity(0.5);

    // On combine les deux formes pour "creuser" la fenêtre de scan dans le fond
    final cutout = Path.combine(
      PathOperation.difference,
      backgroundPath,
      cutoutPath,
    );
    canvas.drawPath(cutout, backgroundPaint);

    // On dessine une bordure autour de la fenêtre de scan
    final borderPaint = Paint()
      ..color = Colors.white
      ..style = PaintingStyle.stroke
      ..strokeWidth = 4;
    canvas.drawRect(scanWindow, borderPaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return false;
  }
}
```

`food-tracking-app/lib\screens\home_screen.dart`:

```dart
import 'package:flutter/material.dart';
import '../models/food_item.dart';
import '../models/daily_summary.dart';
import 'add_food_screen.dart';
import 'settings_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../helpers/database_helper.dart'; 
import 'package:intl/intl.dart';
import '../widgets/home/summary_card.dart';
import '../widgets/home/meal_journal_card.dart';
import '../controllers/home_controller.dart';
import '../models/saved_meals.dart';
import '../widgets/home/quick_add_card.dart';
import '../widgets/common/empty_state_widget.dart';
import 'stats_screen.dart';
import '../widgets/common/primary_button.dart';
import '../widgets/common/secondary_button.dart';


class HomeScreen extends StatefulWidget  {
  const HomeScreen({super.key});
  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with WidgetsBindingObserver, TickerProviderStateMixin {
  final HomeController _controller = HomeController();

  List<FoodItem> foodItems = [];
  List<FoodItem> _favoriteFoods = [];
  List<SavedMeal> _savedMeals = [];

  late TabController _tabController;

  int _selectedIndex = 0;

  // Valeurs max en dur
  double goalCalories = 1700;
  double goalProtein = 160;
  double goalCarbs = 150;
  double goalFat = 60;

  // Totaux calculés
  double get totalCalories =>
      foodItems.fold(0, (sum, item) => sum + item.totalCalories);
  double get totalProtein =>
      foodItems.fold(0, (sum, item) => sum + item.totalProtein);
  double get totalCarbs =>
      foodItems.fold(0, (sum, item) => sum + item.totalCarbs);
  double get totalFat =>
      foodItems.fold(0, (sum, item) => sum + item.totalFat);

  // Fonction de formatage des nombres pour affichage
  String formatDouble(double value) => value.toStringAsFixed(0);

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    WidgetsBinding.instance.addObserver(this);

    _controller.checkAndResetLogIfNeeded().then((_) {
      _refreshData();
    });
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    // Si l'état est "resumed", ça veut dire que l'app était en pause et revient
    if (state == AppLifecycleState.resumed) {
      _checkDateAndResetIfNeeded();
    }
  }

  Future<void> _checkDateAndResetIfNeeded() async {
    final prefs = await SharedPreferences.getInstance();
    
    // 2. Récupérer la dernière date de visite
    final String? lastVisitDateStr = prefs.getString('lastVisitDate');
    final today = DateTime.now();
    
    // On ne garde que la partie "Année-Mois-Jour" pour comparer les jours
    final todayDateOnly = DateTime(today.year, today.month, today.day);

    // 3. Si c'est la toute première visite, on sauvegarde la date et on continue
    if (lastVisitDateStr == null) {
      await prefs.setString('lastVisitDate', todayDateOnly.toIso8601String());
      _refreshData();
      return;
    }

    final lastVisitDate = DateTime.parse(lastVisitDateStr);

    // 4. LA CONDITION CLÉ : Si la dernière visite était avant aujourd'hui
    if (lastVisitDate.isBefore(todayDateOnly)) {
      // On vide le journal de la BDD
      await DatabaseHelper.instance.clearFoodLog();
      // On met à jour la date de dernière visite à aujourd'hui
      await prefs.setString('lastVisitDate', todayDateOnly.toIso8601String());
    } else {
    }
    
    // Dans tous les cas (reset ou pas), on rafraîchit l'affichage
    _refreshData();
  }

  @override
  void dispose() {
    // Très important de se désabonner pour éviter les fuites de mémoire
    _tabController.dispose(); 
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  Future<void> _refreshData() async {
    // Les méthodes de chargement appellent maintenant le controller
    // et mettent à jour l'état de l'UI avec le résultat
    final goals = await _controller.loadGoals();
    final favorites = await _controller.loadFavorites();
    final log = await _controller.loadFoodLogForToday();
    final savedMeals = await _controller.loadSavedMeals();
    
    setState(() {
      goalCalories = goals['calories']!;
      goalCarbs = goals['carbs']!;
      goalProtein = goals['protein']!;
      goalFat = goals['fat']!;
      _favoriteFoods = favorites;
      _savedMeals = savedMeals;
      foodItems = log;
    });

    final summary = DailySummary(
      date: DateTime.now(),
      totalCalories: totalCalories,
      totalCarbs: totalCarbs,
      totalProtein: totalProtein,
      totalFat: totalFat,
      goalCalories: goalCalories,
    );
    await _controller.saveOrUpdateSummary(summary);
  }

  Future<void> _addSavedMealToLog(SavedMeal savedMeal, MealType mealType) async {
  final now = DateTime.now();
  for (final itemTemplate in savedMeal.items) {
    final itemToLog = itemTemplate.copyWith(
      date: now,
      mealType: mealType,
      forceIdToNull: true,
    );
    await DatabaseHelper.instance.createFoodLog(itemToLog);

  }
}

  Future<void> _loadFavoriteFoodsFromDb() async {
    final favorites = await DatabaseHelper.instance.getFavorites();
    setState(() {
      _favoriteFoods = favorites;
    });
  }

  Future<void> _loadFoodLogFromDb() async {
    final log = await DatabaseHelper.instance.getFoodLogForDate(DateTime.now());
    setState(() {
      foodItems = log;
    });
  }
  
  Future<void> _showDeleteFavoriteDialog(FoodItem favorite) async {
    // L'ID ne peut pas être null ici car il vient de la BDD
    final int favoriteId = favorite.id!; 

    return showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Supprimer le favori ?'),
          content: Text('Voulez-vous vraiment supprimer "${favorite.name}" de vos favoris ?'),
          actions: <Widget>[
            SecondaryButton(
              text: 'Annuler',
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            PrimaryButton(
              text: 'Confirmer',
              onPressed: () async {
                await DatabaseHelper.instance.deleteFavorite(favoriteId);
                if (context.mounted) {
                  Navigator.of(context).pop();
                  _refreshData();
                }
              },
            ),
          ],
        );
      },
    );
  }

  Future<void> _showSaveMealDialog(MealType mealType, List<FoodItem> items) async {
  final nameController = TextEditingController();
  
  // On pré-remplit avec un nom par défaut
  nameController.text = '${mealType.frenchName} favori';
  return showDialog<void>(
    context: context,
    builder: (context) {
      return AlertDialog(
        title: const Text('Sauvegarder le repas'),
        content: TextField(
          controller: nameController,
          decoration: const InputDecoration(labelText: 'Nom du repas'),
          autofocus: true,
        ),
        actions: [
          SecondaryButton(
              text: 'Annuler',
              onPressed: () {
                Navigator.of(context).pop();
              },
          ),
          PrimaryButton(
              text: 'Confirmer',
              onPressed: () async {
                if (nameController.text.isNotEmpty) {
                await _controller.saveCurrentMeal(nameController.text, items);
                if (context.mounted) {
                  Navigator.of(context).pop();
                  _refreshData();
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Repas sauvegardé !')),
                  );
                }
                }
              }
            ),
        ],
      );
    },
  );

  
}

// lib/screens/home_screen.dart > _HomeScreenState

Future<void> _showAddSavedMealToMealDialog(SavedMeal meal) async {
  // 1. On attend que le menu se ferme ET nous renvoie un résultat
  final bool? refreshNeeded = await showModalBottomSheet<bool>(
    context: context,
    useSafeArea: true,
    builder: (BuildContext context) {
      final bottomPadding = MediaQuery.of(context).viewPadding.bottom;

      // Fonction interne pour éviter de répéter du code
      void handleMealSelection(MealType mealType) async {
        await _addSavedMealToLog(meal, mealType);
        if (context.mounted) {
          // 2. Une fois la sauvegarde terminée, on ferme le menu
          //    en renvoyant 'true' pour dire "opération réussie".
          Navigator.pop(context, true);
        }
      }

      return SingleChildScrollView(
        child: Padding(
          padding: EdgeInsets.only(bottom: bottomPadding),
          child: Wrap(
            children: [
              ListTile(
                title: Text('Ajouter "${meal.name}" à...', style: const TextStyle(fontWeight: FontWeight.bold)),
              ),
              const Divider(thickness: 1),
              ListTile(
                leading: const Icon(Icons.wb_sunny_outlined),
                title: const Text('Petit-déjeuner'),
                onTap: () => handleMealSelection(MealType.breakfast),
              ),
              ListTile(
                leading: const Icon(Icons.lunch_dining_outlined),
                title: const Text('Déjeuner'),
                onTap: () => handleMealSelection(MealType.lunch),
              ),
              ListTile(
                leading: const Icon(Icons.dinner_dining_outlined),
                title: const Text('Dîner'),
                onTap: () => handleMealSelection(MealType.dinner),
              ),
              ListTile(
                leading: const Icon(Icons.fastfood_outlined),
                title: const Text('Collation'),
                onTap: () => handleMealSelection(MealType.snack),
              ),
            ],
          ),
        ),
      );
    },
  );

  // 3. Ce code s'exécute APRÈS la fermeture du menu.
  //    Si on a reçu le signal 'true', on rafraîchit l'interface.
  if (refreshNeeded == true && mounted) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('"${meal.name}" ajouté au journal !')),
    );
    _refreshData();
  }
}

  Future<void> _showQuantityDialog(FoodItem favorite, MealType meal) async {
    final quantityController = TextEditingController();
    final formKey = GlobalKey<FormState>();

    // On peut pré-remplir avec la quantité par défaut du favori si elle existe
    quantityController.text = favorite.quantity?.toStringAsFixed(0) ?? '100';

    return showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Quelle quantité ?'),
          content: Form(
            key: formKey,
            child: TextFormField(
              controller: quantityController,
              keyboardType: const TextInputType.numberWithOptions(decimal: true),
              decoration: const InputDecoration(
                labelText: 'Quantité (g)',
                suffixText: 'g',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Champ requis';
                }
                if (double.tryParse(value) == null || double.parse(value) <= 0) {
                  return 'Quantité invalide';
                }
                return null;
              },
              autofocus: true,
            ),
          ),
          actions: <Widget>[
            SecondaryButton(
              text: 'Annuler',
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            PrimaryButton(
              text: 'Confirmer',
              onPressed: () async {
                if (formKey.currentState!.validate()) {
                  final double newQuantity = double.parse(quantityController.text);

                  // On utilise copyWith pour créer un nouvel item avec la bonne quantité et la date du jour
                  final itemToLog = favorite.copyWith(
                    quantity: newQuantity,
                    date: DateTime.now(),
                    mealType: meal, 
                    forceIdToNull: true,
                  );
                  
                  // On insère ce nouvel item dans le journal
                  await DatabaseHelper.instance.createFoodLog(itemToLog);

                  // On ferme la popup et on rafraîchit la liste
                  if (context.mounted) {
                    Navigator.of(context).pop();
                    _loadFoodLogFromDb();
                  }
                }
              },
            ),
          ],
        );
      },
    );
  }

   Future<void> _showAddFavoriteToMealDialog(FoodItem favorite) async {
  // Fonction interne pour gérer la logique après la sélection d'un repas
    addFavoriteAndRefresh(MealType meal) async {
      // 1. On ferme le menu
      Navigator.of(context).pop();

      // 2. On affiche la popup pour demander la quantité
      await _showQuantityDialog(favorite, meal);

      // 3. On rafraîchit les données (au cas où, bien que _showQuantityDialog le fasse déjà)
      _refreshData();
    }

    return showModalBottomSheet<void>(
    context: context,
    useSafeArea: true,
    builder: (BuildContext context) {
      final bottomPadding = MediaQuery.of(context).viewPadding.bottom;
      return SingleChildScrollView(child: Padding(padding: EdgeInsets.only(bottom: bottomPadding),child: Wrap(
        children: <Widget>[
          const ListTile(
            title: Text('Ajouter ce favori à...', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Divider(),
          ListTile(
            leading: const Icon(Icons.wb_sunny_outlined),
            title: const Text('Petit-déjeuner'),
            onTap: () => addFavoriteAndRefresh(MealType.breakfast),
          ),
          ListTile(
            leading: const Icon(Icons.lunch_dining_outlined),
            title: const Text('Déjeuner'),
            onTap: () => addFavoriteAndRefresh(MealType.lunch),
          ),
          ListTile(
            leading: const Icon(Icons.dinner_dining_outlined),
            title: const Text('Dîner'),
            onTap: () => addFavoriteAndRefresh(MealType.dinner),
          ),
          ListTile(
            leading: const Icon(Icons.fastfood_outlined),
            title: const Text('Collation'),
            onTap: () => addFavoriteAndRefresh(MealType.snack),
          ),
        ],
      ),
      ),
      );
    },
    );
  }

  Future<void> _showClearAllDialog(int tabIndex) async {
  // On détermine sur quel onglet on se trouve pour adapter le message
    final bool isFavoritesTab = tabIndex == 0;
    final String title = isFavoritesTab ? 'Vider les favoris ?' : 'Vider les repas ?';
    final String content = isFavoritesTab 
        ? 'Toutes vos favoris seront supprimés. Cette action est irréversible.'
        : 'Tous vos repas sauvegardés seront supprimés. Cette action est irréversible.';

    return showDialog<void>(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(title),
          content: Text(content),
          actions: [
            SecondaryButton(text: 'Annuler', onPressed: () => Navigator.pop(context)),
            PrimaryButton(
              text: 'Tout supprimer',
              onPressed: () async {
                if (isFavoritesTab) {
                  await _controller.clearAllFavorites();
                } else {
                  await _controller.clearAllSavedMeals();
                }
                if(context.mounted) Navigator.pop(context);
                _refreshData(); // On rafraîchit pour voir la liste vide
              },
            ),
          ],
        );
      },
    );
  }

  Future<void> _showDeleteSavedMealDialog(SavedMeal meal) async {
    return showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Supprimer ce repas ?'),
          content: Text('Voulez-vous vraiment supprimer le repas "${meal.name}" ? Cette action est irréversible.'),
          actions: <Widget>[
            SecondaryButton(
              text: 'Annuler',
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            PrimaryButton(
              text: 'Confirmer',
              onPressed: () async {
                await _controller.deleteSavedMeal(meal.id!);
                if (context.mounted) {
                  Navigator.of(context).pop();
                  _refreshData(); // On rafraîchit tout pour voir le changement
                }
              },
            ),
          ],
        );
      },
    );
  }

 Widget _buildWelcomeMessage() {
    final hour = DateTime.now().hour;

    String message;
    if (hour < 12) {
      message = 'Bonjour ! 👋';
    } else if (hour < 18) {
      message = 'Bon après-midi ! ☀️';
    } else {
      message = 'Bonsoir ! 🌙 ';
    }
    return Text(
      message,
      style: Theme.of(context).textTheme.headlineSmall,
    );
  }

  Widget _buildDateDisplay() {
    final String formattedDate = DateFormat('EEEE d MMMM', 'fr_FR').format(DateTime.now());

    return Text(
      formattedDate[0].toUpperCase() + formattedDate.substring(1),
      
      style: Theme.of(context).textTheme.bodySmall,
    );
  }

  Future<void> _showFoodItemActionsMenu(FoodItem item) async {
  return showModalBottomSheet<void>(
    context: context,
    useSafeArea: true,
    builder: (context) {
      return Wrap(
        children: [
          // Un titre pour rappeler de quel aliment il s'agit
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(
              item.name ?? 'Actions pour l''aliment',
              style: Theme.of(context).textTheme.titleLarge,
            ),
          ),
          
          // Action 1 : Modifier
          ListTile(
            leading: const Icon(Icons.edit_outlined),
            title: const Text('Modifier la quantité'),
            onTap: () {
              Navigator.pop(context); // Ferme le menu
              _showEditQuantityDialog(item); // Ouvre la popup de modification
            },
          ),

          // Action 2 : Ajouter aux favoris
          ListTile(
            leading: const Icon(Icons.star_border_outlined),
            title: const Text('Ajouter aux favoris'),
            onTap: () async {
              Navigator.pop(context); // Ferme le menu
              // On appelle directement la logique d'ajout
              final success = await _controller.addFoodItemToFavorites(item);
              if (!mounted) return;
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(success 
                      ? '"${item.name}" ajouté aux favoris !' 
                      : 'Cet aliment est déjà dans vos favoris.'),
                ),
              );
              _refreshData();
            },
          ),

          // Action 3 : Supprimer
          ListTile(
            leading: Icon(Icons.delete_outline, color: Colors.red.shade700),
            title: Text(
              'Supprimer du journal',
              style: TextStyle(color: Colors.red.shade700),
            ),
            onTap: () {
              Navigator.pop(context); // Ferme le menu
              // On simule la logique du Dismissible
              _controller.deleteFoodLogItem(item.id!);
              setState(() {
                foodItems.remove(item);
              });
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('"${item.name}" supprimé.')),
              );
            },
          ),
        ],
      );
    },
  );
}

  void _showMealSelection() {
    // Le menu va lancer l'écran d'ajout avec le bon repas en paramètre
    navigateToAddFoodScreen(MealType meal) {
      Navigator.pop(context); // On ferme le menu
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => AddFoodScreen(mealType: meal),
        ),
      ).then((_) => _refreshData()); // On rafraîchit quand on revient
    }

      showModalBottomSheet(
      context: context,
      useSafeArea: true,
      builder: (context) {
        final bottomPadding = MediaQuery.of(context).viewPadding.bottom;
        return SingleChildScrollView(
          child: Padding(padding: EdgeInsets.only(bottom: bottomPadding), 
        child:  
        Wrap(
          children: [
            ListTile(
              leading: const Icon(Icons.wb_sunny_outlined),
              title: const Text('Petit-déjeuner'),
              onTap: () => navigateToAddFoodScreen(MealType.breakfast),
            ),
            ListTile(
              leading: const Icon(Icons.lunch_dining_outlined),
              title: const Text('Déjeuner'),
              onTap: () => navigateToAddFoodScreen(MealType.lunch),
            ),
            ListTile(
              leading: const Icon(Icons.dinner_dining_outlined),
              title: const Text('Dîner'),
              onTap: () => navigateToAddFoodScreen(MealType.dinner),
            ),
            ListTile(
              leading: const Icon(Icons.fastfood_outlined),
              title: const Text('Collation'),
              onTap: () => navigateToAddFoodScreen(MealType.snack),
            ),
          ],
        ),
        ),
        );
      },
      );
    }

    PreferredSizeWidget _buildAppBar() {
    switch (_selectedIndex) {
      // Cas 1 : Onglet "Progrès" (index 1)
      case 1:
        return AppBar(
          title: Text(
            'Mes Progrès',
            style: Theme.of(context).textTheme.headlineSmall,
          ),
        );

      // Cas 2 : Onglet "Paramètres" (index 2)
      case 2:
        // Notre SettingsScreen a déjà sa propre AppBar, mais par sécurité,
        // si un jour vous la changez, celle-ci s'affichera.
        return AppBar(
          title: Text(
            'Paramètres',
            style: Theme.of(context).textTheme.headlineSmall,
          ),
        );

      // Cas 0 : Onglet "Journal" (par défaut)
      case 0:
      default:
        // On retourne notre AppBar personnalisée et complexe
        return PreferredSize(
          preferredSize: const Size.fromHeight(80.0),
          child: AppBar(
            elevation: 0,
            backgroundColor: Colors.transparent,
            title: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildWelcomeMessage(),
                _buildDateDisplay(),
              ],
            ),
            centerTitle: false,
            
          ),
        );
    }
  }

  Widget _buildJournalView() {
    final groupedFoodItems = _controller.groupFoodItemsByMeal(foodItems);
    final gaugeRadiusCalories = 90.0;

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 8.0),
        child: ListView(
          children: [
            // --- ON APPELLE NOTRE NOUVEAU WIDGET DE RÉSUMÉ ---
            SummaryCard(
              totalCalories: totalCalories,
              goalCalories: goalCalories,
              totalCarbs: totalCarbs,
              goalCarbs: goalCarbs,
              totalProtein: totalProtein,
              goalProtein: goalProtein,
              totalFat: totalFat,
              goalFat: goalFat,
              gaugeRadiusCalories: gaugeRadiusCalories,
            ),
            
          const SizedBox(height: 16),

          MealJournalCard(
              tabController: _tabController,
              groupedFoodItems: groupedFoodItems,
              buildMealList: _buildMealList,
              onSaveMeal: _showSaveMealDialog, // <-- ON PASSE LA NOUVELLE MÉTHODE
            ),

            const SizedBox(height: 16),

          SizedBox(
            height: 300,
            child: QuickAddCard(
              favoriteFoods: _favoriteFoods,
              savedMeals: _savedMeals,
              onFavoriteTap: _showAddFavoriteToMealDialog,
              onSavedMealTap: _showAddSavedMealToMealDialog,
              onFavoriteLongPress: _showDeleteFavoriteDialog,
              onSavedMealLongPress: _showDeleteSavedMealDialog,
              onClearAllTapped: _showClearAllDialog,
            ),
          ),
  
          const SizedBox(height: 16),

          
          
      ],
    ),
   );
  }
 
  @override
  Widget build(BuildContext context) {
    final List<Widget> pages = <Widget>[
      _buildJournalView(), // Page 0 : Notre journal
      StatsScreen(),   // Page 1 : L'écran de statistiques
      SettingsScreen(onSettingsChanged: _refreshData),// Page 2 : L'écran des paramètres
    ];

    return Scaffold(
      appBar: _buildAppBar(),
    body: IndexedStack(
        index: _selectedIndex,
        children: pages,
        ),
       bottomNavigationBar: BottomNavigationBar(
        // La liste des boutons de la barre
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.menu_book_outlined),
            activeIcon: Icon(Icons.menu_book),
            label: 'Journal',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.bar_chart_outlined),
            activeIcon: Icon(Icons.bar_chart),
            label: 'Progrès',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings_outlined),
            activeIcon: Icon(Icons.settings),
            label: 'Paramètres',
          ),
        ],
        currentIndex: _selectedIndex, // L'onglet actuellement actif
        selectedItemColor: Theme.of(context).colorScheme.primary, // Couleur de l'item actif
        unselectedItemColor: Colors.grey,
        showUnselectedLabels: false,
        // La fonction à appeler quand on clique sur un onglet
        onTap: (index) {
          setState(() {
            _selectedIndex = index;
          });
        },
      ),
      floatingActionButton: _selectedIndex == 0
          ? FloatingActionButton(
              onPressed: _showMealSelection,
              child: const Icon(Icons.add),
            )
          : null,
    );
}

Future<void> _showEditQuantityDialog(FoodItem item) async {
  final quantityController = TextEditingController(text: (item.quantity ?? 100).toStringAsFixed(0));
  
  // On affiche une popup similaire à celle que nous connaissons
  final newQuantity = await showDialog<double>(
    context: context,
    builder: (context) => AlertDialog(
      title: Text('Modifier la quantité de "${item.name}"'),
      content: TextField(
        controller: quantityController,
        keyboardType: const TextInputType.numberWithOptions(decimal: true),
        decoration: const InputDecoration(labelText: 'Nouvelle quantité (g)'),
        autofocus: true,
      ),
      actions: [
        TextButton(child: const Text('Annuler'), onPressed: () => Navigator.pop(context)),
        ElevatedButton(
          child: const Text('Valider'),
          onPressed: () {
            final double? parsedQuantity = double.tryParse(quantityController.text);
            if (parsedQuantity != null && parsedQuantity > 0) {
              Navigator.pop(context, parsedQuantity);
            }
          },
        ),
      ],
    ),
  );

  // Si l'utilisateur a validé une nouvelle quantité, on met à jour la BDD et l'interface
  if (newQuantity != null && newQuantity != item.quantity) {
    await _controller.updateFoodLogItemQuantity(item.id!, newQuantity);
    _refreshData(); // On rafraîchit tout pour mettre à jour les totaux
  }
}

Widget _buildMealList(List<FoodItem> mealItems) {
  if (mealItems.isEmpty) {
    // L'état vide ne change pas
    return const EmptyStateWidget(
      imagePath: 'assets/images/undraw_healthy-habit_2ata.svg',
      title: 'Ce repas est encore vide',
      subtitle: 'Appuyez sur le bouton "+" pour ajouter votre premier aliment.',
    );
  }

  // ON RETOURNE UNE COLUMN POUR POUVOIR AJOUTER UN BOUTON PLUS TARD
  return Column(
    children: [
      // La liste doit être dans un Expanded pour prendre la place disponible
      Expanded(
        child: ListView.builder(
          padding: const EdgeInsets.symmetric(horizontal: 8.0),
          itemCount: mealItems.length,
          itemBuilder: (context, index) {
            final item = mealItems[index];
            return ListTile(
        title: Text(
          item.name ?? 'Aliment sans nom',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        subtitle: Text(
          '${item.quantity != null ? item.quantity!.toStringAsFixed(0) : '0'} g  •  G: ${item.totalCarbs.toStringAsFixed(0)} g P: ${item.totalProtein.toStringAsFixed(0)} g L: ${item.totalFat.toStringAsFixed(0)} g',
          style: Theme.of(context).textTheme.bodySmall,
        ),
        trailing: Text(
          '${item.totalCalories.toStringAsFixed(0)} kcal',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
            color: Theme.of(context).colorScheme.primary,
          ),
        ),
        // Le clic court ouvre maintenant notre nouveau menu d'actions
        onTap: () => _showFoodItemActionsMenu(item),
      );
          },
        ),
      ),
      Padding(
        padding: const EdgeInsets.all(16.0),
        child: SecondaryButton( // On utilise notre bouton secondaire
          text: 'Ajouter un aliment',
          icon: Icons.add,
          onPressed: () {
            // On identifie le repas actuellement sélectionné dans le TabController
            final currentMealType = MealType.values[_tabController.index];
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => AddFoodScreen(mealType: currentMealType),
              ),
            ).then((_) => _refreshData());
          },
        ),
      ),
    ],
  );
}
}
```

`food-tracking-app/lib\screens\settings_screen.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:percent_indicator/circular_percent_indicator.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../controllers/settings_controller.dart';
import '../widgets/common/primary_button.dart';
import 'package:provider/provider.dart'; // <-- Importer Provider
import '../providers/theme_provider.dart'; // <-- Importer le provider

class SettingsScreen extends StatefulWidget {

  final VoidCallback onSettingsChanged;

  const SettingsScreen({super.key,required this.onSettingsChanged,});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  final _formKey = GlobalKey<FormState>();
  final _caloriesController = TextEditingController();
  final _carbsController = TextEditingController();
  final _proteinController = TextEditingController();
  final _fatController = TextEditingController();

  final _controller = SettingsController();

  bool _isLoading = true;


  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData() async {
    final settings = await _controller.loadSettings();
    if (!mounted) return;
    setState(() {
      _caloriesController.text = (settings['goalCalories'] as double).toString();
      _carbsController.text = (settings['goalCarbs'] as double).toString();
      _proteinController.text = (settings['goalProtein'] as double).toString();
      _fatController.text = (settings['goalFat'] as double).toString();
      _isLoading = false;
    });
  }

  Future<void> _saveGoals() async {
    if (_formKey.currentState!.validate()) {
      final goals = {
        'calories': double.parse(_caloriesController.text),
        'carbs': double.parse(_carbsController.text),
        'protein': double.parse(_proteinController.text),
        'fat': double.parse(_fatController.text),
      };

      await _controller.saveGoals(goals);

      if (!mounted) return;
      
      widget.onSettingsChanged();

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Objectifs enregistrés')),
      );
      

    }
  }

  @override
  Widget build(BuildContext context) {

    final themeProvider = Provider.of<ThemeProvider>(context);
    
    // L'AppBar est gérée par HomeScreen, nous construisons uniquement le corps.
    return Scaffold(
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          // On utilise un ListView pour que l'écran soit scrollable sur les petits téléphones
          : ListView(
              padding: const EdgeInsets.all(16.0),
              children: [
                // --- CARTE 1 : LES OBJECTIFS ---
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Form(
                      key: _formKey,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // On utilise le style de titre du thème
                          Text(
                            'Mes Objectifs Nutritionnels',
                            style: Theme.of(context).textTheme.titleLarge,
                          ),
                          const SizedBox(height: 16),
                          _buildTextField(_caloriesController, 'Calories (kcal)'),
                          const SizedBox(height: 12),
                          _buildTextField(_carbsController, 'Glucides (g)'),
                          const SizedBox(height: 12),
                          _buildTextField(_proteinController, 'Protéines (g)'),
                          const SizedBox(height: 12),
                          _buildTextField(_fatController, 'Lipides (g)'),
                          const SizedBox(height: 24),
                          // On utilise notre bouton personnalisé
                          PrimaryButton(
                            text: 'Enregistrer les modifications',
                            onPressed: _saveGoals,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),

                const SizedBox(height: 24),

                Card(
            child: SwitchListTile(
              title: Text(
                'Mode Sombre',
                style: Theme.of(context).textTheme.titleMedium,
              ),
              // La valeur du Switch dépend du thème actuel
              value: themeProvider.themeMode == ThemeMode.dark,
              activeColor: Theme.of(context).colorScheme.primary,
              // Quand l'utilisateur bascule le Switch
              onChanged: (bool value) {
                // On utilise context.read pour appeler une méthode du provider
                // C'est la bonne pratique dans un callback comme onChanged.
                context.read<ThemeProvider>().setThemeMode(
                  value ? ThemeMode.dark : ThemeMode.light,
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String label) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: TextFormField(
        controller: controller,
        keyboardType: TextInputType.number,
        decoration: InputDecoration(labelText: label, border: const OutlineInputBorder()),
        validator: (value) {
          if (value == null || value.isEmpty) return 'Champ obligatoire';
          if (double.tryParse(value) == null) return 'Entrez un nombre valide';
          return null;
        },
      ),
    );
  }
}

```

`food-tracking-app/lib\screens\stats_screen.dart`:

```dart
// lib/screens/stats_screen.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/daily_summary.dart';
import '../widgets/common/empty_state_widget.dart';
import '../controllers/home_controller.dart'; // Assurez-vous que ce chemin est correct

// ON TRANSFORME LE WIDGET EN STATELESSWIDGET
class StatsScreen extends StatefulWidget {
  const StatsScreen({super.key});

  @override
  State<StatsScreen> createState() => _StatsScreenState();
}
class _StatsScreenState extends State<StatsScreen> {
  final HomeController _controller = HomeController();
  List<DailySummary> _summaries = [];
  bool _isLoading = true;

  final DateFormat dayFormat = DateFormat('EEEE d MMMM', 'fr_FR');

  @override
  void initState() {
    super.initState();
    _loadData();
  }

 Future<void> _loadData() async {
    final allSummaries = await _controller.getRecentSummaries();

    final today = DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day);
    final pastSummaries = allSummaries.where((summary) {
      // On s'assure de ne comparer que les jours, sans les heures
      final summaryDate = DateTime(summary.date.year, summary.date.month, summary.date.day);
      // On ne garde que les dates STRICTEMENT antérieures à aujourd'hui
      return summaryDate.isBefore(today);
    }).toList();

    // On s'assure que le widget est toujours "monté" (affiché) avant de mettre à jour son état
    if (mounted) {
      setState(() {
        // 3. On utilise la liste FILTRÉE pour l'affichage
        _summaries = pastSummaries;
        _isLoading = false;
      });
    }
  }
  
   @override
  Widget build(BuildContext context) {
     return Scaffold(
      // ...
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _summaries.isEmpty
              ? const EmptyStateWidget(
                imagePath: 'assets/images/undraw_stats.svg',
                title: 'Les statistiques apparaîtront ici',
                subtitle: 'Enregistrez vos repas pendant quelques jours pour voir vos progrès se dessiner.',
              )
              : ListView.builder(
                  padding: const EdgeInsets.all(8.0),
                  itemCount: _summaries.length,
                  itemBuilder: (context, index) {
                    final summary = _summaries[index];
                    final goalReached = summary.totalCalories <= summary.goalCalories;
                    final dayFormat = DateFormat('EEEE d MMMM', 'fr_FR');

                    // ON ENVELOPPE LA CARD DANS UN ROW POUR AJOUTER LA BARRE DE COULEUR
                    return Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // 1. LA BARRE DE COULEUR LATERALE
                        Container(
                          width: 5,
                          height: 140, // Hauteur approximative de la carte
                          margin: const EdgeInsets.only(top: 8.0),
                          decoration: BoxDecoration(
                            color: goalReached ? Colors.green : Colors.red,
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                        
                        // ON ENVELOPPE LA CARD DANS UN EXPANDED POUR QU'ELLE PRENNE LA LARGEUR RESTANTE
                        Expanded(
                          child: Card(
                            elevation: 2.0,
                            margin: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 8.0),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12.0),
                            ),
                            child: Padding(
                              padding: const EdgeInsets.all(16.0),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  // La ligne Date + Coche/Croix ne change pas
                                  Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              dayFormat.format(summary.date),
                              style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
                            ),
                            Icon(
                              goalReached ? Icons.check_circle : Icons.cancel,
                              color: goalReached ? Colors.green : Colors.red,
                            ),
                          ],
                        ),
                                  const Divider(height: 24),
                                  // La ligne des calories ne change pas
                                   Text(
                          '${summary.totalCalories.toStringAsFixed(0)} / ${summary.goalCalories.toStringAsFixed(0)} kcal',
                          style: Theme.of(context).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.w500),
                        ),
                      const SizedBox(height: 16),
                      
                      // 2. LA NOUVELLE BARRE DE PROGRESSION DES MACROS
                      _buildMacrosRatioBar(summary),
                    ],
                    ),
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  Widget _buildMacrosRatioBar(DailySummary summary) {
    final totalMacros = summary.totalCarbs + summary.totalProtein + summary.totalFat;
    if (totalMacros == 0) return const SizedBox.shrink(); // Ne rien afficher si pas de macros

    return Row(
      children: [
        Expanded(
          flex: (summary.totalCarbs / totalMacros * 100).round(),
          child: Container(height: 8, color: Colors.blue),
        ),
        Expanded(
          flex: (summary.totalProtein / totalMacros * 100).round(),
          child: Container(height: 8, color: Colors.red),
        ),
        Expanded(
          flex: (summary.totalFat / totalMacros * 100).round(),
          child: Container(height: 8, color: Colors.orange),
        ),
      ],
    );
  }
}


```

`food-tracking-app/lib\widgets\common\empty_state_widget.dart`:

```dart
// lib/widgets/common/empty_state_widget.dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';

class EmptyStateWidget extends StatelessWidget {
  final String imagePath;
  final String title;
  final String subtitle;

  const EmptyStateWidget({
    super.key,
    required this.imagePath,
    required this.title,
    required this.subtitle,
  });

  @override
  Widget build(BuildContext context) {
    // ON ENVELOPPE LE TOUT DANS UN SINGLECHILDSCROLLVIEW
    return SingleChildScrollView(
      child: Center(
        child: Padding(
          // On peut réduire un peu le padding pour gagner de la place
          padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SvgPicture.asset(
                imagePath,
                // On peut aussi réduire légèrement la hauteur de l'image
                height: 80, 
              ),
              const SizedBox(height: 24),
              Text(
                title,
                textAlign: TextAlign.center,
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                subtitle,
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

`food-tracking-app/lib\widgets\common\primary_button.dart`:

```dart
// lib/widgets/common/primary_button.dart
import 'package:flutter/material.dart';

class PrimaryButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final IconData? icon;

  const PrimaryButton({
    super.key,
    required this.text,
    this.onPressed,
    this.icon,
  });

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        backgroundColor: Theme.of(context).colorScheme.primary, // Vert du thème
        foregroundColor: Theme.of(context).colorScheme.onPrimary, // Texte blanc
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12.0),
        ),
        textStyle: const TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
        ),
      ),
      child: icon != null
          ? Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(icon, size: 20),
                const SizedBox(width: 8),
                Text(text),
              ],
            )
          : Text(text),
    );
  }
}
```

`food-tracking-app/lib\widgets\common\secondary_button.dart`:

```dart
// lib/widgets/common/secondary_button.dart
import 'package:flutter/material.dart';

class SecondaryButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final IconData? icon;

  const SecondaryButton({
    super.key,
    required this.text,
    this.onPressed,
    this.icon,
  });

  @override
  Widget build(BuildContext context) {
    return OutlinedButton(
      onPressed: onPressed,
      style: OutlinedButton.styleFrom(
        foregroundColor: Theme.of(context).colorScheme.primary, // Texte/icône en vert
        side: BorderSide(color: Theme.of(context).colorScheme.primary, width: 1.5), // Bordure verte
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12.0),
        ),
        textStyle: const TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
        ),
      ),
      child: icon != null
          ? Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(icon, size: 20),
                const SizedBox(width: 8),
                Text(text),
              ],
            )
          : Text(text),
    );
  }
}
```

`food-tracking-app/lib\widgets\home\meal_journal_card.dart`:

```dart
// lib/widgets/home/meal_journal_card.dart
import 'package:flutter/material.dart';
import '../../models/food_item.dart';

class MealJournalCard extends StatelessWidget {
  final TabController tabController;
  final Map<MealType, List<FoodItem>> groupedFoodItems;
  final Widget Function(List<FoodItem> mealItems) buildMealList;
  final Function(MealType mealType, List<FoodItem> items) onSaveMeal;

  const MealJournalCard({
    super.key,
    required this.tabController,
    required this.groupedFoodItems,
    required this.buildMealList,
    required this.onSaveMeal,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height : 300,
      child: Card(
      elevation: 2.0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
      clipBehavior: Clip.antiAlias,
      child: Column(
        children: [
          Row(
            children: [
              Expanded(
                child: TabBar(
                  controller: tabController,
                  labelColor: Theme.of(context).colorScheme.primary,
                  unselectedLabelColor: Colors.grey,
                  labelStyle: const TextStyle(fontSize: 12, fontWeight: FontWeight.w600), // Police un peu plus petite pour mieux loger
                  unselectedLabelStyle: const TextStyle(fontSize: 12),
                  // On remplace le padding par défaut pour un look plus compact
                  labelPadding: const EdgeInsets.symmetric(horizontal: 4.0), 
                  tabs: const [
                    // On ajoute un 'icon' à chaque Tab
                    Tab(icon: Icon(Icons.wb_sunny_outlined), text: 'Petit-déj'),
                    Tab(icon: Icon(Icons.lunch_dining_outlined), text: 'Déjeuner'),
                    Tab(icon: Icon(Icons.nightlight_round_outlined), text: 'Dîner'),
                    Tab(icon: Icon(Icons.fastfood_outlined), text: 'Collation'),
                  ],
                ),
              ),
              IconButton(
                icon: const Icon(Icons.bookmark_add_outlined),
                tooltip: 'Sauvegarder ce repas',
                onPressed: () {
                  final currentMealType = MealType.values[tabController.index];
                  final currentItems = groupedFoodItems[currentMealType]!;
                  if (currentItems.isNotEmpty) {
                    onSaveMeal(currentMealType, currentItems);
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Ce repas est vide, impossible de le sauvegarder.')),
                    );
                  }
                },
              ),
            ],
          ),
          const Divider(height: 1),
          // Ce Expanded ici est correct, car son parent direct est une Column.
          Expanded(
            child: TabBarView(
              controller: tabController,
              children: [
                buildMealList(groupedFoodItems[MealType.breakfast]!),
                buildMealList(groupedFoodItems[MealType.lunch]!),
                buildMealList(groupedFoodItems[MealType.dinner]!),
                buildMealList(groupedFoodItems[MealType.snack]!),
              ],
            ),
          ),
        ],
      ),
    ),
    );
  }
}
```

`food-tracking-app/lib\widgets\home\quick_add_card.dart`:

```dart
// lib/widgets/home/quick_add_card.dart

import 'package:flutter/material.dart';
import '../../models/food_item.dart';
import '../../models/saved_meals.dart';
import '../common/empty_state_widget.dart';

class _QuickAddButton extends StatelessWidget {
  final String label;
  final IconData icon;
  final Color backgroundColor;
  final Color foregroundColor;
  final VoidCallback onTap;
  final VoidCallback? onLongPress;

  const _QuickAddButton({
    required this.label,
    required this.icon,
    required this.backgroundColor,
    required this.foregroundColor,
    required this.onTap,
    this.onLongPress,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      onLongPress: onLongPress,
      borderRadius: BorderRadius.circular(20.0), // Pour l'effet d'ondulation
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 8.0),
        decoration: BoxDecoration(
          color: backgroundColor,
          borderRadius: BorderRadius.circular(20.0),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: foregroundColor),
            const SizedBox(width: 6),
            Text(
              label,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: foregroundColor,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class QuickAddCard extends StatefulWidget {
  // Les paramètres reçus ne changent pas
  final List<FoodItem> favoriteFoods;
  final List<SavedMeal> savedMeals;
  final Function(FoodItem) onFavoriteTap;
  final Function(SavedMeal) onSavedMealTap;
  final Function(FoodItem) onFavoriteLongPress;
  final Function(SavedMeal) onSavedMealLongPress;
  
  final Function(int tabIndex) onClearAllTapped; // <-- NOUVEAU CALLBACK

  const QuickAddCard({
    super.key,
    required this.favoriteFoods,
    required this.savedMeals,
    required this.onFavoriteTap,
    required this.onSavedMealTap,
    required this.onFavoriteLongPress,
    required this.onSavedMealLongPress,
    required this.onClearAllTapped,
  });

  @override
  State<QuickAddCard> createState() => _QuickAddCardState();
}

class _QuickAddCardState extends State<QuickAddCard> with TickerProviderStateMixin {
  late TabController _tabController;
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  // --- NOS VARIABLES D'ÉTAT CORRIGÉES ---
  bool _isExpanded = false;
  // On sauvegarde nous-même l'index de l'onglet actif
  int _activeTabIndex = 0; 

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _searchController.addListener(() {
      setState(() {
        _searchQuery = _searchController.text.toLowerCase();
      });
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  // Les hauteurs ne changent pas
  final double _collapsedHeight = 75.0;
  final double _expandedHeight = 200.0;

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2.0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
      clipBehavior: Clip.antiAlias,
      child: AnimatedContainer(
        height: _isExpanded ? _expandedHeight : _collapsedHeight,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
        child: Column(
          children: [
            Row(children: [
              Expanded(child: TabBar(
              controller: _tabController,
              // --- LA LOGIQUE DE GESTION DE CLIC, DÉFINITIVE ET CORRECTE ---
              onTap: (tappedIndex) {
                setState(() {
                  // Cas 1 : La carte est DÉJÀ dépliée ET on clique sur le même onglet
                  if (_isExpanded && _activeTabIndex == tappedIndex) {
                    _isExpanded = false; // Alors on la replie
                  } else {
                  // Cas 2 : Dans TOUS les autres cas (carte repliée, ou clic sur un autre onglet)
                    _isExpanded = true; // Alors on la déplie (ou la laisse dépliée)
                  }
                  
                  // À la fin, on met à jour notre variable avec le nouvel onglet actif
                  _activeTabIndex = tappedIndex;
                });
              },
              labelColor: Theme.of(context).colorScheme.primary,
              unselectedLabelColor: Colors.grey,
              tabs: const [
                Tab(icon: Icon(Icons.star_outline), text: 'Aliments'),
                Tab(icon: Icon(Icons.restaurant_menu_outlined), text: 'Repas'),
              ],
            ),
            ),

            IconButton(
                  icon: const Icon(Icons.delete_sweep_outlined),
                  color: Colors.grey,
                  tooltip: 'Vider la liste',
                  onPressed: () {
                    // On appelle le callback en lui passant l'index de l'onglet actif
                    widget.onClearAllTapped(_tabController.index);
                  },
                )

            ],
            ),
            
            if (_isExpanded) // On utilise la même condition ici pour la performance
              Expanded(
                child: TabBarView(
                  physics: const NeverScrollableScrollPhysics(),
                  controller: _tabController,
                  children: [
                    _buildFavoritesView(widget.favoriteFoods),
                    _buildSavedMealsView(widget.savedMeals),
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }

  

  Widget _buildFavoritesView(List<FoodItem> items) {
  // On filtre la liste en fonction de la recherche
  final filteredItems = items.where((item) {
    return item.name?.toLowerCase().contains(_searchQuery) ?? false;
  }).toList();

  return Column(
    children: [
      _buildSearchView(hintText: 'Rechercher dans les favoris...'), // Notre champ de recherche
      Expanded(
        child: filteredItems.isEmpty
            ? const EmptyStateWidget(
              imagePath: 'assets/images/undraw_love-it_8pc0.svg', 
              title: 'Aucun aliment favori',
              subtitle: 'Sauvegardez vos aliments fréquents ici pour les ajouter en un clin d\'œil.',)
            : ListView.builder(
                itemCount: filteredItems.length,
                itemBuilder: (context, index) {
                  final food = filteredItems[index];
                  return ListTile(
                    leading: const Icon(Icons.star, color: Colors.amber),
                    title: Text(food.name ?? 'Sans nom'),
                    onTap: () => widget.onFavoriteTap(food),
                    onLongPress: () => widget.onFavoriteLongPress(food),
                  );
                },
              ),
      ),
    ],
  );
}



  Widget _buildSearchView({required String hintText}) {
  return Padding(
    padding: const EdgeInsets.all(8.0),
    child: TextField(
      controller: _searchController,
      decoration: InputDecoration(
        hintText: 'Rechercher dans les favoris...',
        prefixIcon: const Icon(Icons.search),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12.0),
          borderSide: BorderSide.none,
        ),
        filled: true,
        fillColor: Colors.grey.withOpacity(0.1),
      ),
    ),
  );
}

  Widget _buildSavedMealsView(List<SavedMeal> meals) {
  // On filtre la liste des repas en fonction de la recherche
  final filteredMeals = meals.where((meal) {
    return meal.name.toLowerCase().contains(_searchQuery);
  }).toList();

  return Column(
    children: [
      // On réutilise notre méthode de construction pour le champ de recherche
      _buildSearchView(hintText: 'Rechercher dans les repas...'),
      
      Expanded(
        child: filteredMeals.isEmpty
            ? const EmptyStateWidget(
                imagePath: 'assets/images/undraw_breakfast_rgx5.svg',
                title: 'Aucun résultat trouvé',
                subtitle: 'Essayez un autre terme de recherche ou sauvegardez de nouveaux repas.',
              )
            // On affiche la liste verticale
            : ListView.builder(
                padding: EdgeInsets.zero,
                itemCount: filteredMeals.length,
                itemBuilder: (context, index) {
                  final meal = filteredMeals[index];
                  // On utilise un ListTile pour un affichage propre et cliquable
                  return ListTile(
                    leading: const Icon(Icons.bookmark, color: Colors.green),
                    title: Text(meal.name),
                    onTap: () => widget.onSavedMealTap(meal),
                    onLongPress: () => widget.onSavedMealLongPress(meal),
                  );
                },
              ),
      ),
    ],
  );
}
}

```

`food-tracking-app/lib\widgets\home\summary_card.dart`:

```dart
// lib/widgets/home/summary_card.dart

import 'package:flutter/material.dart';
import 'package:percent_indicator/percent_indicator.dart';

// lib/widgets/home/summary_card.dart

// --- WIDGET PRIVÉ POUR LA JAUGE DE CALORIES ---
class _CalorieIndicator extends StatelessWidget {
  final double radius;
  final double total;
  final double goal;

  const _CalorieIndicator({
    required this.radius,
    required this.total,
    required this.goal,
  });

  @override
  Widget build(BuildContext context) {
    // On récupère les styles depuis le thème global
    final headlineStyle = Theme.of(context).textTheme.displaySmall?.copyWith(fontWeight: FontWeight.w600);
    final captionStyle = Theme.of(context).textTheme.bodySmall;

    return Column(
      children: [
        CircularPercentIndicator(
          radius: radius,
          lineWidth: 12.0,
          percent: (goal > 0.0 ? total / goal : 0.0).clamp(0.0, 1.0),
          center: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(total.toStringAsFixed(0), style: headlineStyle),
              Text('KCAL CONSOMMÉES', style: captionStyle),
            ],
          ),
          progressColor: Colors.green,
          backgroundColor: Colors.green.withOpacity(0.2),
          circularStrokeCap: CircularStrokeCap.round,
          animation: true,
          animateFromLastPercent: true,
          animationDuration: 1200,
          curve: Curves.easeInOutCubic,
        ),
        const SizedBox(height: 8.0),
        Text(
          '${(goal - total).clamp(0, goal).toStringAsFixed(0)} restantes',
          // On utilise le style de corps de texte du thème
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w500),
        ),
      ],
    );
  }
}

// --- WIDGET PRIVÉ POUR LES MACROS ---
class _MacroIndicator extends StatelessWidget {
  final IconData iconData;
  final String label;
  final double value;
  final double max;
  final Color color;

  // On n'a plus besoin du paramètre 'radius'
  const _MacroIndicator({
    required this.iconData,
    required this.label,
    required this.value,
    required this.max,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    // FittedBox va automatiquement réduire la taille de la Column
    // pour qu'elle rentre dans l'espace fourni par le parent (Expanded).
    return FittedBox(
      fit: BoxFit.scaleDown,
      child: Column(
        children: [
          Stack(
            alignment: Alignment.center,
            children: [
              CircularPercentIndicator(
                // On lui donne une taille de base fixe et assez grande.
                // FittedBox s'occupera de la réduire si nécessaire.
                radius: 50.0,
                lineWidth: 9.0,
                percent: (max > 0.0 ? value / max : 0.0).clamp(0.0, 1.0),
                backgroundColor: color.withAlpha(50),
                progressColor: color,
                circularStrokeCap: CircularStrokeCap.round,
                animation: true,
                animateFromLastPercent: true,
                animationDuration: 800,
              ),
              Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(iconData, color: color, size: 22), // Taille fixe
                  const SizedBox(height: 4),
                  Text(
                    '${value.toStringAsFixed(0)} g / ${max.toStringAsFixed(0)} g', // Texte simplifié pour gagner de la place
                    textAlign: TextAlign.center,
                    style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          fontWeight: FontWeight.w600,
                        ),
                  ),
                ],
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            label,
            style: Theme.of(context).textTheme.labelLarge?.copyWith(
                  color: color,
                  fontWeight: FontWeight.bold,
                ),
          ),
        ],
      ),
    );
  }
}

// LE WIDGET SummaryCard PRINCIPAL, SIMPLIFIÉ
class SummaryCard extends StatelessWidget {
  final double totalCalories;
  final double goalCalories;
  final double totalCarbs;
  final double goalCarbs;
  final double totalProtein;
  final double goalProtein;
  final double totalFat;
  final double goalFat;
  final double gaugeRadiusCalories;

  const SummaryCard({
    super.key,
    required this.totalCalories,
    required this.goalCalories,
    required this.totalCarbs,
    required this.goalCarbs,
    required this.totalProtein,
    required this.goalProtein,
    required this.totalFat,
    required this.goalFat,
    required this.gaugeRadiusCalories,
  });

  @override
  Widget build(BuildContext context) {
    // ON REMPLACE LA Card PAR UN CONTAINER POUR UN CONTRÔLE TOTAL DU STYLE
    return 
    Container(
      // La décoration nous permet de définir la couleur, les bordures, l'ombre, etc.
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface, // Le blanc de notre thème
        borderRadius: const BorderRadius.vertical(
          bottom: Radius.circular(24.0), // On arrondit uniquement les coins du bas
        ),
        // On ajoute une ombre personnalisée et plus douce
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 15,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.fromLTRB(16, 20, 16, 24),
        child: Column(
          children: [
            _CalorieIndicator(
              radius: gaugeRadiusCalories,
              total: totalCalories,
              goal: goalCalories,
            ),
            const SizedBox(height: 24),
            // LA NOUVELLE ROW, QUI UTILISE EXPANDED
            Row(
              children: [
                Expanded(
                  child: _MacroIndicator(
                    label: 'Glucides',
                    iconData: Icons.local_fire_department_outlined,
                    value: totalCarbs,
                    max: goalCarbs,
                    color: Colors.blue,
                  ),
                ),
                const SizedBox(width: 8), // Espaceur entre les jauges
                Expanded(
                  child: _MacroIndicator(
                    label: 'Protéines',
                    iconData: Icons.fitness_center_outlined,
                    value: totalProtein,
                    max: goalProtein,
                    color: Colors.red,
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: _MacroIndicator(
                    label: 'Lipides',
                    iconData: Icons.water_drop_outlined,
                    value: totalFat,
                    max: goalFat,
                    color: Colors.orange,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}


```

`food-tracking-app/linux\CMakeLists.txt`:

```txt
# Project-level configuration.
cmake_minimum_required(VERSION 3.13)
project(runner LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "foodtrackingapp")
# The unique GTK application identifier for this application. See:
# https://wiki.gnome.org/HowDoI/ChooseApplicationID
set(APPLICATION_ID "com.example.foodtrackingapp")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(SET CMP0063 NEW)

# Load bundled libraries from the lib/ directory relative to the binary.
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

# Root filesystem for cross-building.
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()

# Define build configuration options.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()

# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()

# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

# Only the install-generated bundle's copy of the executable will launch
# correctly, since the resources must in the right relative locations. To avoid
# people trying to run the unbundled copy, put it in a subdirectory instead of
# the default top-level location.
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)


# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)


# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach(bundled_library)

# Copy the native assets provided by the build.dart from all packages.
set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/linux/")
install(DIRECTORY "${NATIVE_ASSETS_DIR}"
   DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
   COMPONENT Runtime)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

```

`food-tracking-app/linux\flutter\CMakeLists.txt`:

```txt
# This file controls Flutter-level build steps. It should not be edited.
cmake_minimum_required(VERSION 3.10)

set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

# Configuration provided via flutter tool.
include(${EPHEMERAL_DIR}/generated_config.cmake)

# TODO: Move the rest of this into files in ephemeral. See
# https://github.com/flutter/flutter/issues/57146.

# Serves the same purpose as list(TRANSFORM ... PREPEND ...),
# which isn't available in 3.10.
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()

# === Flutter Library ===
# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)

set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)

list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
add_dependencies(flutter flutter_assemble)

# === Flutter tool backend ===
# _phony_ is a non-existent file to force this command to run every time,
# since currently there's no way to get a full input/output list from the
# flutter tool.
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)

```

`food-tracking-app/linux\flutter\generated_plugin_registrant.cc`:

```cc
//
//  Generated file. Do not edit.
//

// clang-format off

#include "generated_plugin_registrant.h"


void fl_register_plugins(FlPluginRegistry* registry) {
}

```

`food-tracking-app/linux\flutter\generated_plugin_registrant.h`:

```h
//
//  Generated file. Do not edit.
//

// clang-format off

#ifndef GENERATED_PLUGIN_REGISTRANT_
#define GENERATED_PLUGIN_REGISTRANT_

#include <flutter_linux/flutter_linux.h>

// Registers Flutter plugins.
void fl_register_plugins(FlPluginRegistry* registry);

#endif  // GENERATED_PLUGIN_REGISTRANT_

```

`food-tracking-app/linux\flutter\generated_plugins.cmake`:

```cmake
#
# Generated file, do not edit.
#

list(APPEND FLUTTER_PLUGIN_LIST
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/linux plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/linux plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)

```

`food-tracking-app/linux\runner\CMakeLists.txt`:

```txt
cmake_minimum_required(VERSION 3.13)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the application ID.
add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")

# Add dependency libraries. Add any application-specific dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)

target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

```

`food-tracking-app/linux\runner\main.cc`:

```cc
#include "my_application.h"

int main(int argc, char** argv) {
  g_autoptr(MyApplication) app = my_application_new();
  return g_application_run(G_APPLICATION(app), argc, argv);
}

```

`food-tracking-app/linux\runner\my_application.cc`:

```cc
#include "my_application.h"

#include <flutter_linux/flutter_linux.h>
#ifdef GDK_WINDOWING_X11
#include <gdk/gdkx.h>
#endif

#include "flutter/generated_plugin_registrant.h"

struct _MyApplication {
  GtkApplication parent_instance;
  char** dart_entrypoint_arguments;
};

G_DEFINE_TYPE(MyApplication, my_application, GTK_TYPE_APPLICATION)

// Implements GApplication::activate.
static void my_application_activate(GApplication* application) {
  MyApplication* self = MY_APPLICATION(application);
  GtkWindow* window =
      GTK_WINDOW(gtk_application_window_new(GTK_APPLICATION(application)));

  // Use a header bar when running in GNOME as this is the common style used
  // by applications and is the setup most users will be using (e.g. Ubuntu
  // desktop).
  // If running on X and not using GNOME then just use a traditional title bar
  // in case the window manager does more exotic layout, e.g. tiling.
  // If running on Wayland assume the header bar will work (may need changing
  // if future cases occur).
  gboolean use_header_bar = TRUE;
#ifdef GDK_WINDOWING_X11
  GdkScreen* screen = gtk_window_get_screen(window);
  if (GDK_IS_X11_SCREEN(screen)) {
    const gchar* wm_name = gdk_x11_screen_get_window_manager_name(screen);
    if (g_strcmp0(wm_name, "GNOME Shell") != 0) {
      use_header_bar = FALSE;
    }
  }
#endif
  if (use_header_bar) {
    GtkHeaderBar* header_bar = GTK_HEADER_BAR(gtk_header_bar_new());
    gtk_widget_show(GTK_WIDGET(header_bar));
    gtk_header_bar_set_title(header_bar, "foodtrackingapp");
    gtk_header_bar_set_show_close_button(header_bar, TRUE);
    gtk_window_set_titlebar(window, GTK_WIDGET(header_bar));
  } else {
    gtk_window_set_title(window, "foodtrackingapp");
  }

  gtk_window_set_default_size(window, 1280, 720);
  gtk_widget_show(GTK_WIDGET(window));

  g_autoptr(FlDartProject) project = fl_dart_project_new();
  fl_dart_project_set_dart_entrypoint_arguments(project, self->dart_entrypoint_arguments);

  FlView* view = fl_view_new(project);
  gtk_widget_show(GTK_WIDGET(view));
  gtk_container_add(GTK_CONTAINER(window), GTK_WIDGET(view));

  fl_register_plugins(FL_PLUGIN_REGISTRY(view));

  gtk_widget_grab_focus(GTK_WIDGET(view));
}

// Implements GApplication::local_command_line.
static gboolean my_application_local_command_line(GApplication* application, gchar*** arguments, int* exit_status) {
  MyApplication* self = MY_APPLICATION(application);
  // Strip out the first argument as it is the binary name.
  self->dart_entrypoint_arguments = g_strdupv(*arguments + 1);

  g_autoptr(GError) error = nullptr;
  if (!g_application_register(application, nullptr, &error)) {
     g_warning("Failed to register: %s", error->message);
     *exit_status = 1;
     return TRUE;
  }

  g_application_activate(application);
  *exit_status = 0;

  return TRUE;
}

// Implements GApplication::startup.
static void my_application_startup(GApplication* application) {
  //MyApplication* self = MY_APPLICATION(object);

  // Perform any actions required at application startup.

  G_APPLICATION_CLASS(my_application_parent_class)->startup(application);
}

// Implements GApplication::shutdown.
static void my_application_shutdown(GApplication* application) {
  //MyApplication* self = MY_APPLICATION(object);

  // Perform any actions required at application shutdown.

  G_APPLICATION_CLASS(my_application_parent_class)->shutdown(application);
}

// Implements GObject::dispose.
static void my_application_dispose(GObject* object) {
  MyApplication* self = MY_APPLICATION(object);
  g_clear_pointer(&self->dart_entrypoint_arguments, g_strfreev);
  G_OBJECT_CLASS(my_application_parent_class)->dispose(object);
}

static void my_application_class_init(MyApplicationClass* klass) {
  G_APPLICATION_CLASS(klass)->activate = my_application_activate;
  G_APPLICATION_CLASS(klass)->local_command_line = my_application_local_command_line;
  G_APPLICATION_CLASS(klass)->startup = my_application_startup;
  G_APPLICATION_CLASS(klass)->shutdown = my_application_shutdown;
  G_OBJECT_CLASS(klass)->dispose = my_application_dispose;
}

static void my_application_init(MyApplication* self) {}

MyApplication* my_application_new() {
  // Set the program name to the application ID, which helps various systems
  // like GTK and desktop environments map this running application to its
  // corresponding .desktop file. This ensures better integration by allowing
  // the application to be recognized beyond its binary name.
  g_set_prgname(APPLICATION_ID);

  return MY_APPLICATION(g_object_new(my_application_get_type(),
                                     "application-id", APPLICATION_ID,
                                     "flags", G_APPLICATION_NON_UNIQUE,
                                     nullptr));
}

```

`food-tracking-app/linux\runner\my_application.h`:

```h
#ifndef FLUTTER_MY_APPLICATION_H_
#define FLUTTER_MY_APPLICATION_H_

#include <gtk/gtk.h>

G_DECLARE_FINAL_TYPE(MyApplication, my_application, MY, APPLICATION,
                     GtkApplication)

/**
 * my_application_new:
 *
 * Creates a new Flutter-based application.
 *
 * Returns: a new #MyApplication.
 */
MyApplication* my_application_new();

#endif  // FLUTTER_MY_APPLICATION_H_

```

`food-tracking-app/macos\Flutter\Flutter-Debug.xcconfig`:

```xcconfig
#include "ephemeral/Flutter-Generated.xcconfig"

```

`food-tracking-app/macos\Flutter\Flutter-Release.xcconfig`:

```xcconfig
#include "ephemeral/Flutter-Generated.xcconfig"

```

`food-tracking-app/macos\Flutter\GeneratedPluginRegistrant.swift`:

```swift
//
//  Generated file. Do not edit.
//

import FlutterMacOS
import Foundation

import mobile_scanner
import path_provider_foundation
import shared_preferences_foundation
import sqflite_darwin

func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  MobileScannerPlugin.register(with: registry.registrar(forPlugin: "MobileScannerPlugin"))
  PathProviderPlugin.register(with: registry.registrar(forPlugin: "PathProviderPlugin"))
  SharedPreferencesPlugin.register(with: registry.registrar(forPlugin: "SharedPreferencesPlugin"))
  SqflitePlugin.register(with: registry.registrar(forPlugin: "SqflitePlugin"))
}

```

`food-tracking-app/macos\Runner.xcodeproj\project.pbxproj`:

```pbxproj
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXAggregateTarget section */
		33CC111A2044C6BA0003C045 /* Flutter Assemble */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = 33CC111B2044C6BA0003C045 /* Build configuration list for PBXAggregateTarget "Flutter Assemble" */;
			buildPhases = (
				33CC111E2044C6BF0003C045 /* ShellScript */,
			);
			dependencies = (
			);
			name = "Flutter Assemble";
			productName = FLX;
		};
/* End PBXAggregateTarget section */

/* Begin PBXBuildFile section */
		331C80D8294CF71000263BE5 /* RunnerTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 331C80D7294CF71000263BE5 /* RunnerTests.swift */; };
		335BBD1B22A9A15E00E9071D /* GeneratedPluginRegistrant.swift in Sources */ = {isa = PBXBuildFile; fileRef = 335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */; };
		33CC10F12044A3C60003C045 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33CC10F02044A3C60003C045 /* AppDelegate.swift */; };
		33CC10F32044A3C60003C045 /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 33CC10F22044A3C60003C045 /* Assets.xcassets */; };
		33CC10F62044A3C60003C045 /* MainMenu.xib in Resources */ = {isa = PBXBuildFile; fileRef = 33CC10F42044A3C60003C045 /* MainMenu.xib */; };
		33CC11132044BFA00003C045 /* MainFlutterWindow.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33CC11122044BFA00003C045 /* MainFlutterWindow.swift */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		331C80D9294CF71000263BE5 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 33CC10E52044A3C60003C045 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 33CC10EC2044A3C60003C045;
			remoteInfo = Runner;
		};
		33CC111F2044C79F0003C045 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 33CC10E52044A3C60003C045 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 33CC111A2044C6BA0003C045;
			remoteInfo = FLX;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXCopyFilesBuildPhase section */
		33CC110E2044A8840003C045 /* Bundle Framework */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Bundle Framework";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		331C80D5294CF71000263BE5 /* RunnerTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = RunnerTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		331C80D7294CF71000263BE5 /* RunnerTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RunnerTests.swift; sourceTree = "<group>"; };
		333000ED22D3DE5D00554162 /* Warnings.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = Warnings.xcconfig; sourceTree = "<group>"; };
		335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = GeneratedPluginRegistrant.swift; sourceTree = "<group>"; };
		33CC10ED2044A3C60003C045 /* foodtrackingapp.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = "foodtrackingapp.app"; sourceTree = BUILT_PRODUCTS_DIR; };
		33CC10F02044A3C60003C045 /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		33CC10F22044A3C60003C045 /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; name = Assets.xcassets; path = Runner/Assets.xcassets; sourceTree = "<group>"; };
		33CC10F52044A3C60003C045 /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.xib; name = Base; path = Base.lproj/MainMenu.xib; sourceTree = "<group>"; };
		33CC10F72044A3C60003C045 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; name = Info.plist; path = Runner/Info.plist; sourceTree = "<group>"; };
		33CC11122044BFA00003C045 /* MainFlutterWindow.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MainFlutterWindow.swift; sourceTree = "<group>"; };
		33CEB47222A05771004F2AC0 /* Flutter-Debug.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = "Flutter-Debug.xcconfig"; sourceTree = "<group>"; };
		33CEB47422A05771004F2AC0 /* Flutter-Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = "Flutter-Release.xcconfig"; sourceTree = "<group>"; };
		33CEB47722A0578A004F2AC0 /* Flutter-Generated.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = "Flutter-Generated.xcconfig"; path = "ephemeral/Flutter-Generated.xcconfig"; sourceTree = "<group>"; };
		33E51913231747F40026EE4D /* DebugProfile.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = DebugProfile.entitlements; sourceTree = "<group>"; };
		33E51914231749380026EE4D /* Release.entitlements */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.entitlements; path = Release.entitlements; sourceTree = "<group>"; };
		33E5194F232828860026EE4D /* AppInfo.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = AppInfo.xcconfig; sourceTree = "<group>"; };
		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = Release.xcconfig; sourceTree = "<group>"; };
		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = Debug.xcconfig; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		331C80D2294CF70F00263BE5 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10EA2044A3C60003C045 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		331C80D6294CF71000263BE5 /* RunnerTests */ = {
			isa = PBXGroup;
			children = (
				331C80D7294CF71000263BE5 /* RunnerTests.swift */,
			);
			path = RunnerTests;
			sourceTree = "<group>";
		};
		33BA886A226E78AF003329D5 /* Configs */ = {
			isa = PBXGroup;
			children = (
				33E5194F232828860026EE4D /* AppInfo.xcconfig */,
				9740EEB21CF90195004384FC /* Debug.xcconfig */,
				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
				333000ED22D3DE5D00554162 /* Warnings.xcconfig */,
			);
			path = Configs;
			sourceTree = "<group>";
		};
		33CC10E42044A3C60003C045 = {
			isa = PBXGroup;
			children = (
				33FAB671232836740065AC1E /* Runner */,
				33CEB47122A05771004F2AC0 /* Flutter */,
				331C80D6294CF71000263BE5 /* RunnerTests */,
				33CC10EE2044A3C60003C045 /* Products */,
				D73912EC22F37F3D000D13A0 /* Frameworks */,
			);
			sourceTree = "<group>";
		};
		33CC10EE2044A3C60003C045 /* Products */ = {
			isa = PBXGroup;
			children = (
				33CC10ED2044A3C60003C045 /* foodtrackingapp.app */,
				331C80D5294CF71000263BE5 /* RunnerTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		33CC11242044D66E0003C045 /* Resources */ = {
			isa = PBXGroup;
			children = (
				33CC10F22044A3C60003C045 /* Assets.xcassets */,
				33CC10F42044A3C60003C045 /* MainMenu.xib */,
				33CC10F72044A3C60003C045 /* Info.plist */,
			);
			name = Resources;
			path = ..;
			sourceTree = "<group>";
		};
		33CEB47122A05771004F2AC0 /* Flutter */ = {
			isa = PBXGroup;
			children = (
				335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */,
				33CEB47222A05771004F2AC0 /* Flutter-Debug.xcconfig */,
				33CEB47422A05771004F2AC0 /* Flutter-Release.xcconfig */,
				33CEB47722A0578A004F2AC0 /* Flutter-Generated.xcconfig */,
			);
			path = Flutter;
			sourceTree = "<group>";
		};
		33FAB671232836740065AC1E /* Runner */ = {
			isa = PBXGroup;
			children = (
				33CC10F02044A3C60003C045 /* AppDelegate.swift */,
				33CC11122044BFA00003C045 /* MainFlutterWindow.swift */,
				33E51913231747F40026EE4D /* DebugProfile.entitlements */,
				33E51914231749380026EE4D /* Release.entitlements */,
				33CC11242044D66E0003C045 /* Resources */,
				33BA886A226E78AF003329D5 /* Configs */,
			);
			path = Runner;
			sourceTree = "<group>";
		};
		D73912EC22F37F3D000D13A0 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		331C80D4294CF70F00263BE5 /* RunnerTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 331C80DE294CF71000263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */;
			buildPhases = (
				331C80D1294CF70F00263BE5 /* Sources */,
				331C80D2294CF70F00263BE5 /* Frameworks */,
				331C80D3294CF70F00263BE5 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				331C80DA294CF71000263BE5 /* PBXTargetDependency */,
			);
			name = RunnerTests;
			productName = RunnerTests;
			productReference = 331C80D5294CF71000263BE5 /* RunnerTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		33CC10EC2044A3C60003C045 /* Runner */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 33CC10FB2044A3C60003C045 /* Build configuration list for PBXNativeTarget "Runner" */;
			buildPhases = (
				33CC10E92044A3C60003C045 /* Sources */,
				33CC10EA2044A3C60003C045 /* Frameworks */,
				33CC10EB2044A3C60003C045 /* Resources */,
				33CC110E2044A8840003C045 /* Bundle Framework */,
				3399D490228B24CF009A79C7 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
				33CC11202044C79F0003C045 /* PBXTargetDependency */,
			);
			name = Runner;
			productName = Runner;
			productReference = 33CC10ED2044A3C60003C045 /* foodtrackingapp.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		33CC10E52044A3C60003C045 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = YES;
				LastSwiftUpdateCheck = 0920;
				LastUpgradeCheck = 1510;
				ORGANIZATIONNAME = "";
				TargetAttributes = {
					331C80D4294CF70F00263BE5 = {
						CreatedOnToolsVersion = 14.0;
						TestTargetID = 33CC10EC2044A3C60003C045;
					};
					33CC10EC2044A3C60003C045 = {
						CreatedOnToolsVersion = 9.2;
						LastSwiftMigration = 1100;
						ProvisioningStyle = Automatic;
						SystemCapabilities = {
							com.apple.Sandbox = {
								enabled = 1;
							};
						};
					};
					33CC111A2044C6BA0003C045 = {
						CreatedOnToolsVersion = 9.2;
						ProvisioningStyle = Manual;
					};
				};
			};
			buildConfigurationList = 33CC10E82044A3C60003C045 /* Build configuration list for PBXProject "Runner" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 33CC10E42044A3C60003C045;
			productRefGroup = 33CC10EE2044A3C60003C045 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				33CC10EC2044A3C60003C045 /* Runner */,
				331C80D4294CF70F00263BE5 /* RunnerTests */,
				33CC111A2044C6BA0003C045 /* Flutter Assemble */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		331C80D3294CF70F00263BE5 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10EB2044A3C60003C045 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				33CC10F32044A3C60003C045 /* Assets.xcassets in Resources */,
				33CC10F62044A3C60003C045 /* MainMenu.xib in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		3399D490228B24CF009A79C7 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "echo \"$PRODUCT_NAME.app\" > \"$PROJECT_DIR\"/Flutter/ephemeral/.app_filename && \"$FLUTTER_ROOT\"/packages/flutter_tools/bin/macos_assemble.sh embed\n";
		};
		33CC111E2044C6BF0003C045 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				Flutter/ephemeral/FlutterInputs.xcfilelist,
			);
			inputPaths = (
				Flutter/ephemeral/tripwire,
			);
			outputFileListPaths = (
				Flutter/ephemeral/FlutterOutputs.xcfilelist,
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"$FLUTTER_ROOT\"/packages/flutter_tools/bin/macos_assemble.sh && touch Flutter/ephemeral/tripwire";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		331C80D1294CF70F00263BE5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				331C80D8294CF71000263BE5 /* RunnerTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10E92044A3C60003C045 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				33CC11132044BFA00003C045 /* MainFlutterWindow.swift in Sources */,
				33CC10F12044A3C60003C045 /* AppDelegate.swift in Sources */,
				335BBD1B22A9A15E00E9071D /* GeneratedPluginRegistrant.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		331C80DA294CF71000263BE5 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 33CC10EC2044A3C60003C045 /* Runner */;
			targetProxy = 331C80D9294CF71000263BE5 /* PBXContainerItemProxy */;
		};
		33CC11202044C79F0003C045 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 33CC111A2044C6BA0003C045 /* Flutter Assemble */;
			targetProxy = 33CC111F2044C79F0003C045 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		33CC10F42044A3C60003C045 /* MainMenu.xib */ = {
			isa = PBXVariantGroup;
			children = (
				33CC10F52044A3C60003C045 /* Base */,
			);
			name = MainMenu.xib;
			path = Runner;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		331C80DB294CF71000263BE5 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/foodtrackingapp.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/foodtrackingapp";
			};
			name = Debug;
		};
		331C80DC294CF71000263BE5 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/foodtrackingapp.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/foodtrackingapp";
			};
			name = Release;
		};
		331C80DD294CF71000263BE5 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/foodtrackingapp.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/foodtrackingapp";
			};
			name = Profile;
		};
		338D0CE9231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Profile;
		};
		338D0CEA231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/DebugProfile.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_VERSION = 5.0;
			};
			name = Profile;
		};
		338D0CEB231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Manual;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Profile;
		};
		33CC10F92044A3C60003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		33CC10FA2044A3C60003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Release;
		};
		33CC10FC2044A3C60003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/DebugProfile.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		33CC10FD2044A3C60003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/Release.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
		33CC111C2044C6BA0003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Manual;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		33CC111D2044C6BA0003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		331C80DE294CF71000263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				331C80DB294CF71000263BE5 /* Debug */,
				331C80DC294CF71000263BE5 /* Release */,
				331C80DD294CF71000263BE5 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC10E82044A3C60003C045 /* Build configuration list for PBXProject "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC10F92044A3C60003C045 /* Debug */,
				33CC10FA2044A3C60003C045 /* Release */,
				338D0CE9231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC10FB2044A3C60003C045 /* Build configuration list for PBXNativeTarget "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC10FC2044A3C60003C045 /* Debug */,
				33CC10FD2044A3C60003C045 /* Release */,
				338D0CEA231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC111B2044C6BA0003C045 /* Build configuration list for PBXAggregateTarget "Flutter Assemble" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC111C2044C6BA0003C045 /* Debug */,
				33CC111D2044C6BA0003C045 /* Release */,
				338D0CEB231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 33CC10E52044A3C60003C045 /* Project object */;
}

```

`food-tracking-app/macos\Runner.xcodeproj\project.xcworkspace\xcshareddata\IDEWorkspaceChecks.plist`:

```plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>

```

`food-tracking-app/macos\Runner.xcodeproj\xcshareddata\xcschemes\Runner.xcscheme`:

```xcscheme
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "33CC10EC2044A3C60003C045"
               BuildableName = "foodtrackingapp.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "foodtrackingapp.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "331C80D4294CF70F00263BE5"
               BuildableName = "RunnerTests.xctest"
               BlueprintName = "RunnerTests"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      enableGPUValidationMode = "1"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "foodtrackingapp.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "foodtrackingapp.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>

```

`food-tracking-app/macos\Runner.xcworkspace\contents.xcworkspacedata`:

```xcworkspacedata
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
</Workspace>

```

`food-tracking-app/macos\Runner.xcworkspace\xcshareddata\IDEWorkspaceChecks.plist`:

```plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>

```

`food-tracking-app/macos\RunnerTests\RunnerTests.swift`:

```swift
import Cocoa
import FlutterMacOS
import XCTest

class RunnerTests: XCTestCase {

  func testExample() {
    // If you add code to the Runner application, consider adding tests here.
    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
  }

}

```

`food-tracking-app/macos\Runner\AppDelegate.swift`:

```swift
import Cocoa
import FlutterMacOS

@main
class AppDelegate: FlutterAppDelegate {
  override func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {
    return true
  }

  override func applicationSupportsSecureRestorableState(_ app: NSApplication) -> Bool {
    return true
  }
}

```

`food-tracking-app/macos\Runner\Assets.xcassets\AppIcon.appiconset\Contents.json`:

```json
{
  "images" : [
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_16.png",
      "scale" : "1x"
    },
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "2x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "1x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_64.png",
      "scale" : "2x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_128.png",
      "scale" : "1x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "2x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "1x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "2x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "1x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_1024.png",
      "scale" : "2x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}

```

`food-tracking-app/macos\Runner\Base.lproj\MainMenu.xib`:

```xib
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="14490.70" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" customObjectInstantitationMethod="direct">
    <dependencies>
        <deployment identifier="macosx"/>
        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="14490.70"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <objects>
        <customObject id="-2" userLabel="File's Owner" customClass="NSApplication">
            <connections>
                <outlet property="delegate" destination="Voe-Tx-rLC" id="GzC-gU-4Uq"/>
            </connections>
        </customObject>
        <customObject id="-1" userLabel="First Responder" customClass="FirstResponder"/>
        <customObject id="-3" userLabel="Application" customClass="NSObject"/>
        <customObject id="Voe-Tx-rLC" customClass="AppDelegate" customModule="Runner" customModuleProvider="target">
            <connections>
                <outlet property="applicationMenu" destination="uQy-DD-JDr" id="XBo-yE-nKs"/>
                <outlet property="mainFlutterWindow" destination="QvC-M9-y7g" id="gIp-Ho-8D9"/>
            </connections>
        </customObject>
        <customObject id="YLy-65-1bz" customClass="NSFontManager"/>
        <menu title="Main Menu" systemMenu="main" id="AYu-sK-qS6">
            <items>
                <menuItem title="APP_NAME" id="1Xt-HY-uBw">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="APP_NAME" systemMenu="apple" id="uQy-DD-JDr">
                        <items>
                            <menuItem title="About APP_NAME" id="5kV-Vb-QxS">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="orderFrontStandardAboutPanel:" target="-1" id="Exp-CZ-Vem"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="VOq-y0-SEH"/>
                            <menuItem title="Preferences…" keyEquivalent="," id="BOF-NM-1cW"/>
                            <menuItem isSeparatorItem="YES" id="wFC-TO-SCJ"/>
                            <menuItem title="Services" id="NMo-om-nkz">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Services" systemMenu="services" id="hz9-B4-Xy5"/>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="4je-JR-u6R"/>
                            <menuItem title="Hide APP_NAME" keyEquivalent="h" id="Olw-nP-bQN">
                                <connections>
                                    <action selector="hide:" target="-1" id="PnN-Uc-m68"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Hide Others" keyEquivalent="h" id="Vdr-fp-XzO">
                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                <connections>
                                    <action selector="hideOtherApplications:" target="-1" id="VT4-aY-XCT"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Show All" id="Kd2-mp-pUS">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="unhideAllApplications:" target="-1" id="Dhg-Le-xox"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="kCx-OE-vgT"/>
                            <menuItem title="Quit APP_NAME" keyEquivalent="q" id="4sb-4s-VLi">
                                <connections>
                                    <action selector="terminate:" target="-1" id="Te7-pn-YzF"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Edit" id="5QF-Oa-p0T">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Edit" id="W48-6f-4Dl">
                        <items>
                            <menuItem title="Undo" keyEquivalent="z" id="dRJ-4n-Yzg">
                                <connections>
                                    <action selector="undo:" target="-1" id="M6e-cu-g7V"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Redo" keyEquivalent="Z" id="6dh-zS-Vam">
                                <connections>
                                    <action selector="redo:" target="-1" id="oIA-Rs-6OD"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="WRV-NI-Exz"/>
                            <menuItem title="Cut" keyEquivalent="x" id="uRl-iY-unG">
                                <connections>
                                    <action selector="cut:" target="-1" id="YJe-68-I9s"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Copy" keyEquivalent="c" id="x3v-GG-iWU">
                                <connections>
                                    <action selector="copy:" target="-1" id="G1f-GL-Joy"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Paste" keyEquivalent="v" id="gVA-U4-sdL">
                                <connections>
                                    <action selector="paste:" target="-1" id="UvS-8e-Qdg"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Paste and Match Style" keyEquivalent="V" id="WeT-3V-zwk">
                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                <connections>
                                    <action selector="pasteAsPlainText:" target="-1" id="cEh-KX-wJQ"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Delete" id="pa3-QI-u2k">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="delete:" target="-1" id="0Mk-Ml-PaM"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Select All" keyEquivalent="a" id="Ruw-6m-B2m">
                                <connections>
                                    <action selector="selectAll:" target="-1" id="VNm-Mi-diN"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="uyl-h8-XO2"/>
                            <menuItem title="Find" id="4EN-yA-p0u">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Find" id="1b7-l0-nxx">
                                    <items>
                                        <menuItem title="Find…" tag="1" keyEquivalent="f" id="Xz5-n4-O0W">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="cD7-Qs-BN4"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find and Replace…" tag="12" keyEquivalent="f" id="YEy-JH-Tfz">
                                            <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="WD3-Gg-5AJ"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find Next" tag="2" keyEquivalent="g" id="q09-fT-Sye">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="NDo-RZ-v9R"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find Previous" tag="3" keyEquivalent="G" id="OwM-mh-QMV">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="HOh-sY-3ay"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Use Selection for Find" tag="7" keyEquivalent="e" id="buJ-ug-pKt">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="U76-nv-p5D"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Jump to Selection" keyEquivalent="j" id="S0p-oC-mLd">
                                            <connections>
                                                <action selector="centerSelectionInVisibleArea:" target="-1" id="IOG-6D-g5B"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Spelling and Grammar" id="Dv1-io-Yv7">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Spelling" id="3IN-sU-3Bg">
                                    <items>
                                        <menuItem title="Show Spelling and Grammar" keyEquivalent=":" id="HFo-cy-zxI">
                                            <connections>
                                                <action selector="showGuessPanel:" target="-1" id="vFj-Ks-hy3"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Check Document Now" keyEquivalent=";" id="hz2-CU-CR7">
                                            <connections>
                                                <action selector="checkSpelling:" target="-1" id="fz7-VC-reM"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem isSeparatorItem="YES" id="bNw-od-mp5"/>
                                        <menuItem title="Check Spelling While Typing" id="rbD-Rh-wIN">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleContinuousSpellChecking:" target="-1" id="7w6-Qz-0kB"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Check Grammar With Spelling" id="mK6-2p-4JG">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleGrammarChecking:" target="-1" id="muD-Qn-j4w"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Correct Spelling Automatically" id="78Y-hA-62v">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticSpellingCorrection:" target="-1" id="2lM-Qi-WAP"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Substitutions" id="9ic-FL-obx">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Substitutions" id="FeM-D8-WVr">
                                    <items>
                                        <menuItem title="Show Substitutions" id="z6F-FW-3nz">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="orderFrontSubstitutionsPanel:" target="-1" id="oku-mr-iSq"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem isSeparatorItem="YES" id="gPx-C9-uUO"/>
                                        <menuItem title="Smart Copy/Paste" id="9yt-4B-nSM">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleSmartInsertDelete:" target="-1" id="3IJ-Se-DZD"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Quotes" id="hQb-2v-fYv">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticQuoteSubstitution:" target="-1" id="ptq-xd-QOA"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Dashes" id="rgM-f4-ycn">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticDashSubstitution:" target="-1" id="oCt-pO-9gS"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Links" id="cwL-P1-jid">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticLinkDetection:" target="-1" id="Gip-E3-Fov"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Data Detectors" id="tRr-pd-1PS">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticDataDetection:" target="-1" id="R1I-Nq-Kbl"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Text Replacement" id="HFQ-gK-NFA">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticTextReplacement:" target="-1" id="DvP-Fe-Py6"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Transformations" id="2oI-Rn-ZJC">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Transformations" id="c8a-y6-VQd">
                                    <items>
                                        <menuItem title="Make Upper Case" id="vmV-6d-7jI">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="uppercaseWord:" target="-1" id="sPh-Tk-edu"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Make Lower Case" id="d9M-CD-aMd">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="lowercaseWord:" target="-1" id="iUZ-b5-hil"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Capitalize" id="UEZ-Bs-lqG">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="capitalizeWord:" target="-1" id="26H-TL-nsh"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Speech" id="xrE-MZ-jX0">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Speech" id="3rS-ZA-NoH">
                                    <items>
                                        <menuItem title="Start Speaking" id="Ynk-f8-cLZ">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="startSpeaking:" target="-1" id="654-Ng-kyl"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Stop Speaking" id="Oyz-dy-DGm">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="stopSpeaking:" target="-1" id="dX8-6p-jy9"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="View" id="H8h-7b-M4v">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="View" id="HyV-fh-RgO">
                        <items>
                            <menuItem title="Enter Full Screen" keyEquivalent="f" id="4J7-dP-txa">
                                <modifierMask key="keyEquivalentModifierMask" control="YES" command="YES"/>
                                <connections>
                                    <action selector="toggleFullScreen:" target="-1" id="dU3-MA-1Rq"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Window" id="aUF-d1-5bR">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Window" systemMenu="window" id="Td7-aD-5lo">
                        <items>
                            <menuItem title="Minimize" keyEquivalent="m" id="OY7-WF-poV">
                                <connections>
                                    <action selector="performMiniaturize:" target="-1" id="VwT-WD-YPe"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Zoom" id="R4o-n2-Eq4">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="performZoom:" target="-1" id="DIl-cC-cCs"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="eu3-7i-yIM"/>
                            <menuItem title="Bring All to Front" id="LE2-aR-0XJ">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="arrangeInFront:" target="-1" id="DRN-fu-gQh"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Help" id="EPT-qC-fAb">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Help" systemMenu="help" id="rJ0-wn-3NY"/>
                </menuItem>
            </items>
            <point key="canvasLocation" x="142" y="-258"/>
        </menu>
        <window title="APP_NAME" allowsToolTipsWhenApplicationIsInactive="NO" autorecalculatesKeyViewLoop="NO" releasedWhenClosed="NO" animationBehavior="default" id="QvC-M9-y7g" customClass="MainFlutterWindow" customModule="Runner" customModuleProvider="target">
            <windowStyleMask key="styleMask" titled="YES" closable="YES" miniaturizable="YES" resizable="YES"/>
            <rect key="contentRect" x="335" y="390" width="800" height="600"/>
            <rect key="screenRect" x="0.0" y="0.0" width="2560" height="1577"/>
            <view key="contentView" wantsLayer="YES" id="EiT-Mj-1SZ">
                <rect key="frame" x="0.0" y="0.0" width="800" height="600"/>
                <autoresizingMask key="autoresizingMask"/>
            </view>
        </window>
    </objects>
</document>

```

`food-tracking-app/macos\Runner\Configs\AppInfo.xcconfig`:

```xcconfig
// Application-level settings for the Runner target.
//
// This may be replaced with something auto-generated from metadata (e.g., pubspec.yaml) in the
// future. If not, the values below would default to using the project name when this becomes a
// 'flutter create' template.

// The application's name. By default this is also the title of the Flutter window.
PRODUCT_NAME = foodtrackingapp

// The application's bundle identifier
PRODUCT_BUNDLE_IDENTIFIER = com.example.foodtrackingapp

// The copyright displayed in application information
PRODUCT_COPYRIGHT = Copyright © 2025 com.example. All rights reserved.

```

`food-tracking-app/macos\Runner\Configs\Debug.xcconfig`:

```xcconfig
#include "../../Flutter/Flutter-Debug.xcconfig"
#include "Warnings.xcconfig"

```

`food-tracking-app/macos\Runner\Configs\Release.xcconfig`:

```xcconfig
#include "../../Flutter/Flutter-Release.xcconfig"
#include "Warnings.xcconfig"

```

`food-tracking-app/macos\Runner\Configs\Warnings.xcconfig`:

```xcconfig
WARNING_CFLAGS = -Wall -Wconditional-uninitialized -Wnullable-to-nonnull-conversion -Wmissing-method-return-type -Woverlength-strings
GCC_WARN_UNDECLARED_SELECTOR = YES
CLANG_UNDEFINED_BEHAVIOR_SANITIZER_NULLABILITY = YES
CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_PRAGMA_PACK = YES
CLANG_WARN_STRICT_PROTOTYPES = YES
CLANG_WARN_COMMA = YES
GCC_WARN_STRICT_SELECTOR_MATCH = YES
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES
GCC_WARN_SHADOW = YES
CLANG_WARN_UNREACHABLE_CODE = YES

```

`food-tracking-app/macos\Runner\DebugProfile.entitlements`:

```entitlements
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.app-sandbox</key>
	<true/>
	<key>com.apple.security.cs.allow-jit</key>
	<true/>
	<key>com.apple.security.network.server</key>
	<true/>
</dict>
</plist>

```

`food-tracking-app/macos\Runner\Info.plist`:

```plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIconFile</key>
	<string></string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSMinimumSystemVersion</key>
	<string>$(MACOSX_DEPLOYMENT_TARGET)</string>
	<key>NSHumanReadableCopyright</key>
	<string>$(PRODUCT_COPYRIGHT)</string>
	<key>NSMainNibFile</key>
	<string>MainMenu</string>
	<key>NSPrincipalClass</key>
	<string>NSApplication</string>
</dict>
</plist>

```

`food-tracking-app/macos\Runner\MainFlutterWindow.swift`:

```swift
import Cocoa
import FlutterMacOS

class MainFlutterWindow: NSWindow {
  override func awakeFromNib() {
    let flutterViewController = FlutterViewController()
    let windowFrame = self.frame
    self.contentViewController = flutterViewController
    self.setFrame(windowFrame, display: true)

    RegisterGeneratedPlugins(registry: flutterViewController)

    super.awakeFromNib()
  }
}

```

`food-tracking-app/macos\Runner\Release.entitlements`:

```entitlements
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.app-sandbox</key>
	<true/>
</dict>
</plist>

```

`food-tracking-app/pubspec.lock`:

```lock
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  archive:
    dependency: transitive
    description:
      name: archive
      sha256: "2fde1607386ab523f7a36bb3e7edb43bd58e6edaf2ffb29d8a6d578b297fdbbd"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.7"
  args:
    dependency: transitive
    description:
      name: args
      sha256: d0481093c50b1da8910eb0bb301626d4d8eb7284aa739614d2b394ee09e3ea04
      url: "https://pub.dev"
    source: hosted
    version: "2.7.0"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "758e6d74e971c3e5aceb4110bfd6698efc7f501675bcfe0c775459a8140750eb"
      url: "https://pub.dev"
    source: hosted
    version: "2.13.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "8aab1771e1243a5063b8b0ff68042d67334e3feab9e95b9490f9a6ebf73b42ea"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: f71061c654a3380576a52b451dd5532377954cf9dbd272a78fc8479606670803
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  checked_yaml:
    dependency: transitive
    description:
      name: checked_yaml
      sha256: "959525d3162f249993882720d52b7e0c833978df229be20702b33d48d91de70f"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.4"
  cli_util:
    dependency: transitive
    description:
      name: cli_util
      sha256: ff6785f7e9e3c38ac98b2fb035701789de90154024a75b6cb926445e83197d1c
      url: "https://pub.dev"
    source: hosted
    version: "0.4.2"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: fddb70d9b5277016c77a80201021d40a2247104d9f4aa7bab7157b7e3f05b84b
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: "2f5709ae4d3d59dd8f7cd309b4e023046b57d8a6c82130785d2b0e5868084e76"
      url: "https://pub.dev"
    source: hosted
    version: "1.19.1"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: "1e445881f28f22d6140f181e07737b22f1e099a5e1ff94b0af2f9e4a463f4855"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.6"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
      url: "https://pub.dev"
    source: hosted
    version: "1.0.8"
  english_words:
    dependency: "direct main"
    description:
      name: english_words
      sha256: "6a7ef6473a97bd8571b6b641d006a6e58a7c67e65fb6f3d6d1151cb46b0e983c"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  equatable:
    dependency: transitive
    description:
      name: equatable
      sha256: "567c64b3cb4cf82397aac55f4f0cbd3ca20d77c6c03bedbc4ceaddc08904aef7"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.7"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "5368f224a74523e8d2e7399ea1638b37aecfca824a3cc4dfdf77bf1fa905ac44"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.3"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: "289279317b4b16eb2bb7e271abccd4bf84ec9bdcbe999e278a94b804f5630418"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  file:
    dependency: transitive
    description:
      name: file
      sha256: a3b4f84adafef897088c160faf7dfffb7696046cb13ae90b508c2cbc95d3b8d4
      url: "https://pub.dev"
    source: hosted
    version: "7.0.1"
  fl_chart:
    dependency: "direct main"
    description:
      name: fl_chart
      sha256: d0f0d49112f2f4b192481c16d05b6418bd7820e021e265a3c22db98acf7ed7fb
      url: "https://pub.dev"
    source: hosted
    version: "0.68.0"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_launcher_icons:
    dependency: "direct dev"
    description:
      name: flutter_launcher_icons
      sha256: "526faf84284b86a4cb36d20a5e45147747b7563d921373d4ee0559c54fcdbcea"
      url: "https://pub.dev"
    source: hosted
    version: "0.13.1"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: "3105dc8492f6183fb076ccf1f351ac3d60564bff92e20bfc4af9cc1651f4e7e1"
      url: "https://pub.dev"
    source: hosted
    version: "6.0.0"
  flutter_svg:
    dependency: "direct main"
    description:
      name: flutter_svg
      sha256: cd57f7969b4679317c17af6fd16ee233c1e60a82ed209d8a475c54fd6fd6f845
      url: "https://pub.dev"
    source: hosted
    version: "2.2.0"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  google_fonts:
    dependency: "direct main"
    description:
      name: google_fonts
      sha256: b1ac0fe2832c9cc95e5e88b57d627c5e68c223b9657f4b96e1487aa9098c7b82
      url: "https://pub.dev"
    source: hosted
    version: "6.2.1"
  http:
    dependency: transitive
    description:
      name: http
      sha256: "2c11f3f94c687ee9bad77c171151672986360b2b001d109814ee7140b2cf261b"
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "178d74305e7866013777bab2c3d8726205dc5a4dd935297175b19a23a2e66571"
      url: "https://pub.dev"
    source: hosted
    version: "4.1.2"
  image:
    dependency: transitive
    description:
      name: image
      sha256: "4e973fcf4caae1a4be2fa0a13157aa38a8f9cb049db6529aa00b4d71abc4d928"
      url: "https://pub.dev"
    source: hosted
    version: "4.5.4"
  intl:
    dependency: "direct main"
    description:
      name: intl
      sha256: d6f56758b7d3014a48af9701c085700aac781a92a87a62b1333b46d8879661cf
      url: "https://pub.dev"
    source: hosted
    version: "0.19.0"
  json_annotation:
    dependency: transitive
    description:
      name: json_annotation
      sha256: "1ce844379ca14835a50d2f019a3099f419082cfdd231cd86a142af94dd5c6bb1"
      url: "https://pub.dev"
    source: hosted
    version: "4.9.0"
  leak_tracker:
    dependency: transitive
    description:
      name: leak_tracker
      sha256: "6bb818ecbdffe216e81182c2f0714a2e62b593f4a4f13098713ff1685dfb6ab0"
      url: "https://pub.dev"
    source: hosted
    version: "10.0.9"
  leak_tracker_flutter_testing:
    dependency: transitive
    description:
      name: leak_tracker_flutter_testing
      sha256: f8b613e7e6a13ec79cfdc0e97638fddb3ab848452eff057653abd3edba760573
      url: "https://pub.dev"
    source: hosted
    version: "3.0.9"
  leak_tracker_testing:
    dependency: transitive
    description:
      name: leak_tracker_testing
      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: a5e2b223cb7c9c8efdc663ef484fdd95bb243bff242ef5b13e26883547fce9a0
      url: "https://pub.dev"
    source: hosted
    version: "6.0.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: dc58c723c3c24bf8d3e2d3ad3f2f9d7bd9cf43ec6feaa64181775e60190153f2
      url: "https://pub.dev"
    source: hosted
    version: "0.12.17"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec
      url: "https://pub.dev"
    source: hosted
    version: "0.11.1"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: e3641ec5d63ebf0d9b41bd43201a66e3fc79a65db5f61fc181f04cd27aab950c
      url: "https://pub.dev"
    source: hosted
    version: "1.16.0"
  mobile_scanner:
    dependency: "direct main"
    description:
      name: mobile_scanner
      sha256: "54005bdea7052d792d35b4fef0f84ec5ddc3a844b250ecd48dc192fb9b4ebc95"
      url: "https://pub.dev"
    source: hosted
    version: "7.0.1"
  nested:
    dependency: transitive
    description:
      name: nested
      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  openfoodfacts:
    dependency: "direct main"
    description:
      name: openfoodfacts
      sha256: "707f22894f3094450c080b3c8de502e4ca6e7423fbd9bb997a21c666ee6509fa"
      url: "https://pub.dev"
    source: hosted
    version: "3.23.0"
  path:
    dependency: "direct main"
    description:
      name: path
      sha256: "75cca69d1490965be98c73ceaea117e8a04dd21217b37b292c9ddbec0d955bc5"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.1"
  path_parsing:
    dependency: transitive
    description:
      name: path_parsing
      sha256: "883402936929eac138ee0a45da5b0f2c80f89913e6dc3bf77eb65b84b409c6ca"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  path_provider:
    dependency: transitive
    description:
      name: path_provider
      sha256: "50c5dd5b6e1aaf6fb3a78b33f6aa3afca52bf903a8a5298f53101fdaee55bbcd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.5"
  path_provider_android:
    dependency: transitive
    description:
      name: path_provider_android
      sha256: d0d310befe2c8ab9e7f393288ccbb11b60c019c6b5afc21973eeee4dda2b35e9
      url: "https://pub.dev"
    source: hosted
    version: "2.2.17"
  path_provider_foundation:
    dependency: transitive
    description:
      name: path_provider_foundation
      sha256: "4843174df4d288f5e29185bd6e72a6fbdf5a4a4602717eed565497429f179942"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  percent_indicator:
    dependency: "direct main"
    description:
      name: percent_indicator
      sha256: "157d29133bbc6ecb11f923d36e7960a96a3f28837549a20b65e5135729f0f9fd"
      url: "https://pub.dev"
    source: hosted
    version: "4.2.5"
  petitparser:
    dependency: transitive
    description:
      name: petitparser
      sha256: "07c8f0b1913bcde1ff0d26e57ace2f3012ccbf2b204e070290dad3bb22797646"
      url: "https://pub.dev"
    source: hosted
    version: "6.1.0"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "5d6b1b0036a5f331ebc77c850ebc8506cbc1e9416c27e59b439f917a902a4984"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.6"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  posix:
    dependency: transitive
    description:
      name: posix
      sha256: "6323a5b0fa688b6a010df4905a56b00181479e6d10534cecfecede2aa55add61"
      url: "https://pub.dev"
    source: hosted
    version: "6.0.3"
  provider:
    dependency: "direct main"
    description:
      name: provider
      sha256: "4abbd070a04e9ddc287673bf5a030c7ca8b685ff70218720abab8b092f53dd84"
      url: "https://pub.dev"
    source: hosted
    version: "6.1.5"
  shared_preferences:
    dependency: "direct main"
    description:
      name: shared_preferences
      sha256: "6e8bf70b7fef813df4e9a36f658ac46d107db4b4cfe1048b477d4e453a8159f5"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.3"
  shared_preferences_android:
    dependency: transitive
    description:
      name: shared_preferences_android
      sha256: "20cbd561f743a342c76c151d6ddb93a9ce6005751e7aa458baad3858bfbfb6ac"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.10"
  shared_preferences_foundation:
    dependency: transitive
    description:
      name: shared_preferences_foundation
      sha256: "6a52cfcdaeac77cad8c97b539ff688ccfc458c007b4db12be584fbe5c0e49e03"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.4"
  shared_preferences_linux:
    dependency: transitive
    description:
      name: shared_preferences_linux
      sha256: "580abfd40f415611503cae30adf626e6656dfb2f0cee8f465ece7b6defb40f2f"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_platform_interface:
    dependency: transitive
    description:
      name: shared_preferences_platform_interface
      sha256: "57cbf196c486bc2cf1f02b85784932c6094376284b3ad5779d1b1c6c6a816b80"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_web:
    dependency: transitive
    description:
      name: shared_preferences_web
      sha256: c49bd060261c9a3f0ff445892695d6212ff603ef3115edbb448509d407600019
      url: "https://pub.dev"
    source: hosted
    version: "2.4.3"
  shared_preferences_windows:
    dependency: transitive
    description:
      name: shared_preferences_windows
      sha256: "94ef0f72b2d71bc3e700e025db3710911bd51a71cefb65cc609dd0d9a982e3c1"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "254ee5351d6cb365c859e20ee823c3bb479bf4a293c22d17a9f1bf144ce86f7c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.1"
  sqflite:
    dependency: "direct main"
    description:
      name: sqflite
      sha256: e2297b1da52f127bc7a3da11439985d9b536f75070f3325e62ada69a5c585d03
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  sqflite_android:
    dependency: transitive
    description:
      name: sqflite_android
      sha256: "2b3070c5fa881839f8b402ee4a39c1b4d561704d4ebbbcfb808a119bc2a1701b"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  sqflite_common:
    dependency: transitive
    description:
      name: sqflite_common
      sha256: "84731e8bfd8303a3389903e01fb2141b6e59b5973cacbb0929021df08dddbe8b"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.5"
  sqflite_darwin:
    dependency: transitive
    description:
      name: sqflite_darwin
      sha256: "279832e5cde3fe99e8571879498c9211f3ca6391b0d818df4e17d9fff5c6ccb3"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  sqflite_platform_interface:
    dependency: transitive
    description:
      name: sqflite_platform_interface
      sha256: "8dd4515c7bdcae0a785b0062859336de775e8c65db81ae33dd5445f35be61920"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "8b27215b45d22309b5cddda1aa2b19bdfec9df0e765f2de506401c071d38d1b1"
      url: "https://pub.dev"
    source: hosted
    version: "1.12.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: "969e04c80b8bcdf826f8f16579c7b14d780458bd97f56d107d3950fdbeef059d"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "921cd31725b72fe181906c6a94d987c78e3b98c2e205b397ea399d4054872b43"
      url: "https://pub.dev"
    source: hosted
    version: "1.4.1"
  synchronized:
    dependency: transitive
    description:
      name: synchronized
      sha256: c254ade258ec8282947a0acbbc90b9575b4f19673533ee46f2f6e9b3aeefd7c0
      url: "https://pub.dev"
    source: hosted
    version: "3.4.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: "7f554798625ea768a7518313e58f83891c7f5024f88e46e7182a4558850a4b8e"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.2"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: fb31f383e2ee25fbbfe06b40fe21e1e458d14080e3c67e7ba0acfde4df4e0bbd
      url: "https://pub.dev"
    source: hosted
    version: "0.7.4"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: f9049c039ebfeb4cf7a7104a675823cd72dba8297f264b6637062516699fa006
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  vector_graphics:
    dependency: transitive
    description:
      name: vector_graphics
      sha256: a4f059dc26fc8295b5921376600a194c4ec7d55e72f2fe4c7d2831e103d461e6
      url: "https://pub.dev"
    source: hosted
    version: "1.1.19"
  vector_graphics_codec:
    dependency: transitive
    description:
      name: vector_graphics_codec
      sha256: "99fd9fbd34d9f9a32efd7b6a6aae14125d8237b10403b422a6a6dfeac2806146"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.13"
  vector_graphics_compiler:
    dependency: transitive
    description:
      name: vector_graphics_compiler
      sha256: "557a315b7d2a6dbb0aaaff84d857967ce6bdc96a63dc6ee2a57ce5a6ee5d3331"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.17"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  vm_service:
    dependency: transitive
    description:
      name: vm_service
      sha256: ddfa8d30d89985b96407efce8acbdd124701f96741f2d981ca860662f1c0dc02
      url: "https://pub.dev"
    source: hosted
    version: "15.0.0"
  web:
    dependency: transitive
    description:
      name: web
      sha256: "868d88a33d8a87b18ffc05f9f030ba328ffefba92d6c127917a2ba740f9cfe4a"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  xml:
    dependency: transitive
    description:
      name: xml
      sha256: b015a8ad1c488f66851d762d3090a21c600e479dc75e68328c52774040cf9226
      url: "https://pub.dev"
    source: hosted
    version: "6.5.0"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: b9da305ac7c39faa3f030eccd175340f968459dae4af175130b3fc47e40d76ce
      url: "https://pub.dev"
    source: hosted
    version: "3.1.3"
sdks:
  dart: ">=3.8.1 <4.0.0"
  flutter: ">=3.29.0"

```

`food-tracking-app/pubspec.yaml`:

```yaml
name: foodtrackingapp
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.8.1

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8
  english_words: ^4.0.0
  provider: ^6.1.5
  percent_indicator: ^4.2.5
  shared_preferences: ^2.5.3
  sqflite: ^2.2.3
  path: ^1.9.0
  mobile_scanner: ^7.0.1 
  openfoodfacts: ^3.2.0
  google_fonts: ^6.2.1
  intl: ^0.19.0
  flutter_svg: ^2.2.0
  fl_chart: ^0.68.0

  
dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^6.0.0
  flutter_launcher_icons: ^0.13.1

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  # La ligne suivante active l'utilisation des icônes Material.
  uses-material-design: true
  # C'est ici que l'on déclare nos assets.
  assets:
    - assets/images/
    
  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images
  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
  
flutter_launcher_icons:
    android: true # Activer pour Android
    ios: true     # Activer pour iOS (c'est une bonne pratique de le laisser)
    image_path: "assets/images/launcher_icon.png" # Chemin vers VOTRE image
    min_sdk_android: 21
```

`food-tracking-app/test\widget_test.dart`:

```dart
// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:foodtrackingapp/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}

```

`food-tracking-app/web\index.html`:

```html
<!DOCTYPE html>
<html>
<head>
  <!--
    If you are serving your web app in a path other than the root, change the
    href value below to reflect the base path you are serving from.

    The path provided below has to start and end with a slash "/" in order for
    it to work correctly.

    For more details:
    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base

    This is a placeholder for base href that will be replaced by the value of
    the `--base-href` argument provided to `flutter build`.
  -->
  <base href="$FLUTTER_BASE_HREF">

  <meta charset="UTF-8">
  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  <meta name="description" content="A new Flutter project.">

  <!-- iOS meta tags & icons -->
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="foodtrackingapp">
  <link rel="apple-touch-icon" href="icons/Icon-192.png">

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="favicon.png"/>

  <title>foodtrackingapp</title>
  <link rel="manifest" href="manifest.json">
</head>
<body>
  <script src="flutter_bootstrap.js" async></script>
</body>
</html>

```

`food-tracking-app/web\manifest.json`:

```json
{
    "name": "foodtrackingapp",
    "short_name": "foodtrackingapp",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#0175C2",
    "theme_color": "#0175C2",
    "description": "A new Flutter project.",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-maskable-192.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "maskable"
        },
        {
            "src": "icons/Icon-maskable-512.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "maskable"
        }
    ]
}

```